// Generated from MiniFSHLexer.g4 by ANTLR 4.9.3
// jshint ignore: start
import antlr4 from 'antlr4';



const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0002\ba\b\u0001\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0003\u0002\u0003\u0002\u0005",
    "\u0002\u0018\n\u0002\u0003\u0002\u0007\u0002\u001b\n\u0002\f\u0002\u000e",
    "\u0002\u001e\u000b\u0002\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0007\u00031\n\u0003\f\u0003\u000e\u00034\u000b\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003",
    "\u0004\u0007\u0004=\n\u0004\f\u0004\u000e\u0004@\u000b\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0005\u0006\u0005G\n\u0005",
    "\r\u0005\u000e\u0005H\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007",
    "\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0007\nY\n\n\f\n\u000e\n\\\u000b\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003>\u0002\u000b\u0003\u0003\u0005\u0004\u0007\u0005\t",
    "\u0006\u000b\u0002\r\u0002\u000f\u0002\u0011\u0007\u0013\b\u0003\u0002",
    "\u0007\u0004\u0002\f\f\u000f\u000f\u0004\u0002\"\"\u00a2\u00a2\u0004",
    "\u0002$$^^\u0006\u0002\u000b\f\u000e\u000f\"\"\u00a2\u00a2\b\u0002\u000b",
    "\f\u000e\u000f\"\"$$^^\u00a2\u00a2\u0002i\u0002\u0003\u0003\u0002\u0002",
    "\u0002\u0002\u0005\u0003\u0002\u0002\u0002\u0002\u0007\u0003\u0002\u0002",
    "\u0002\u0002\t\u0003\u0002\u0002\u0002\u0002\u0011\u0003\u0002\u0002",
    "\u0002\u0002\u0013\u0003\u0002\u0002\u0002\u0003\u0017\u0003\u0002\u0002",
    "\u0002\u0005\"\u0003\u0002\u0002\u0002\u00077\u0003\u0002\u0002\u0002",
    "\tF\u0003\u0002\u0002\u0002\u000bJ\u0003\u0002\u0002\u0002\rL\u0003",
    "\u0002\u0002\u0002\u000fN\u0003\u0002\u0002\u0002\u0011P\u0003\u0002",
    "\u0002\u0002\u0013T\u0003\u0002\u0002\u0002\u0015\u0018\t\u0002\u0002",
    "\u0002\u0016\u0018\u0005\u0013\n\u0002\u0017\u0015\u0003\u0002\u0002",
    "\u0002\u0017\u0016\u0003\u0002\u0002\u0002\u0018\u001c\u0003\u0002\u0002",
    "\u0002\u0019\u001b\u0005\u000b\u0006\u0002\u001a\u0019\u0003\u0002\u0002",
    "\u0002\u001b\u001e\u0003\u0002\u0002\u0002\u001c\u001a\u0003\u0002\u0002",
    "\u0002\u001c\u001d\u0003\u0002\u0002\u0002\u001d\u001f\u0003\u0002\u0002",
    "\u0002\u001e\u001c\u0003\u0002\u0002\u0002\u001f \u0007,\u0002\u0002",
    " !\t\u0003\u0002\u0002!\u0004\u0003\u0002\u0002\u0002\"2\u0007$\u0002",
    "\u0002#1\n\u0004\u0002\u0002$%\u0007^\u0002\u0002%1\u0007w\u0002\u0002",
    "&\'\u0007^\u0002\u0002\'1\u0007t\u0002\u0002()\u0007^\u0002\u0002)1",
    "\u0007p\u0002\u0002*+\u0007^\u0002\u0002+1\u0007v\u0002\u0002,-\u0007",
    "^\u0002\u0002-1\u0007$\u0002\u0002./\u0007^\u0002\u0002/1\u0007^\u0002",
    "\u00020#\u0003\u0002\u0002\u00020$\u0003\u0002\u0002\u00020&\u0003\u0002",
    "\u0002\u00020(\u0003\u0002\u0002\u00020*\u0003\u0002\u0002\u00020,\u0003",
    "\u0002\u0002\u00020.\u0003\u0002\u0002\u000214\u0003\u0002\u0002\u0002",
    "20\u0003\u0002\u0002\u000223\u0003\u0002\u0002\u000235\u0003\u0002\u0002",
    "\u000242\u0003\u0002\u0002\u000256\u0007$\u0002\u00026\u0006\u0003\u0002",
    "\u0002\u000278\u0007$\u0002\u000289\u0007$\u0002\u00029:\u0007$\u0002",
    "\u0002:>\u0003\u0002\u0002\u0002;=\u000b\u0002\u0002\u0002<;\u0003\u0002",
    "\u0002\u0002=@\u0003\u0002\u0002\u0002>?\u0003\u0002\u0002\u0002><\u0003",
    "\u0002\u0002\u0002?A\u0003\u0002\u0002\u0002@>\u0003\u0002\u0002\u0002",
    "AB\u0007$\u0002\u0002BC\u0007$\u0002\u0002CD\u0007$\u0002\u0002D\b\u0003",
    "\u0002\u0002\u0002EG\u0005\r\u0007\u0002FE\u0003\u0002\u0002\u0002G",
    "H\u0003\u0002\u0002\u0002HF\u0003\u0002\u0002\u0002HI\u0003\u0002\u0002",
    "\u0002I\n\u0003\u0002\u0002\u0002JK\t\u0005\u0002\u0002K\f\u0003\u0002",
    "\u0002\u0002LM\n\u0005\u0002\u0002M\u000e\u0003\u0002\u0002\u0002NO",
    "\n\u0006\u0002\u0002O\u0010\u0003\u0002\u0002\u0002PQ\u0005\u000b\u0006",
    "\u0002QR\u0003\u0002\u0002\u0002RS\b\t\u0002\u0002S\u0012\u0003\u0002",
    "\u0002\u0002TU\u00071\u0002\u0002UV\u00071\u0002\u0002VZ\u0003\u0002",
    "\u0002\u0002WY\n\u0002\u0002\u0002XW\u0003\u0002\u0002\u0002Y\\\u0003",
    "\u0002\u0002\u0002ZX\u0003\u0002\u0002\u0002Z[\u0003\u0002\u0002\u0002",
    "[]\u0003\u0002\u0002\u0002\\Z\u0003\u0002\u0002\u0002]^\t\u0002\u0002",
    "\u0002^_\u0003\u0002\u0002\u0002_`\b\n\u0003\u0002`\u0014\u0003\u0002",
    "\u0002\u0002\n\u0002\u0017\u001c02>HZ\u0004\u0002\u0003\u0002\b\u0002",
    "\u0002"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class MiniFSHLexer extends antlr4.Lexer {

    static grammarFileName = "MiniFSHLexer.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [  ];
	static symbolicNames = [ null, "STAR", "STRING", "MULTILINE_STRING", "SEQUENCE", 
                          "WHITESPACE", "LINE_COMMENT" ];
	static ruleNames = [ "STAR", "STRING", "MULTILINE_STRING", "SEQUENCE", 
                      "WS", "NONWS", "NONWS_STR", "WHITESPACE", "LINE_COMMENT" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.PredictionContextCache());
    }

    get atn() {
        return atn;
    }
}

MiniFSHLexer.EOF = antlr4.Token.EOF;
MiniFSHLexer.STAR = 1;
MiniFSHLexer.STRING = 2;
MiniFSHLexer.MULTILINE_STRING = 3;
MiniFSHLexer.SEQUENCE = 4;
MiniFSHLexer.WHITESPACE = 5;
MiniFSHLexer.LINE_COMMENT = 6;



