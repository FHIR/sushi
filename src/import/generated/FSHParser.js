// Generated from FSH.g4 by ANTLR 4.13.0
// jshint ignore: start
import antlr4 from 'antlr4';
import FSHListener from './FSHListener.js';
import FSHVisitor from './FSHVisitor.js';

const serializedATN = [4,1,89,843,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,
4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,1,0,5,0,
186,8,0,10,0,12,0,189,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,3,1,205,8,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,4,3,215,8,3,11,3,12,
3,216,1,3,5,3,220,8,3,10,3,12,3,223,9,3,1,4,1,4,1,4,1,4,5,4,229,8,4,10,4,
12,4,232,9,4,1,4,5,4,235,8,4,10,4,12,4,238,9,4,1,5,1,5,1,5,1,5,5,5,244,8,
5,10,5,12,5,247,9,5,1,5,5,5,250,8,5,10,5,12,5,253,9,5,1,6,1,6,1,6,5,6,258,
8,6,10,6,12,6,261,9,6,1,6,5,6,264,8,6,10,6,12,6,267,9,6,1,7,1,7,1,7,1,7,
3,7,273,8,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,3,8,285,8,8,1,9,1,9,
1,9,3,9,290,8,9,1,10,1,10,1,10,5,10,295,8,10,10,10,12,10,298,9,10,1,10,5,
10,301,8,10,10,10,12,10,304,9,10,1,11,1,11,1,11,1,11,3,11,310,8,11,1,12,
1,12,1,12,3,12,315,8,12,1,13,1,13,1,13,5,13,320,8,13,10,13,12,13,323,9,13,
1,13,5,13,326,8,13,10,13,12,13,329,9,13,1,14,1,14,1,14,1,14,3,14,335,8,14,
1,15,1,15,1,15,3,15,340,8,15,1,16,1,16,1,16,5,16,345,8,16,10,16,12,16,348,
9,16,1,16,5,16,351,8,16,10,16,12,16,354,9,16,1,17,1,17,1,17,3,17,359,8,17,
1,18,1,18,1,18,1,18,1,18,3,18,366,8,18,1,19,1,19,1,19,5,19,371,8,19,10,19,
12,19,374,9,19,1,19,5,19,377,8,19,10,19,12,19,380,9,19,1,20,1,20,1,20,3,
20,385,8,20,1,21,1,21,1,21,3,21,390,8,21,1,22,1,22,1,22,4,22,395,8,22,11,
22,12,22,396,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,407,8,23,1,24,
1,24,1,24,1,24,1,25,1,25,5,25,415,8,25,10,25,12,25,418,9,25,1,25,1,25,1,
26,1,26,1,27,1,27,1,28,1,28,5,28,428,8,28,10,28,12,28,431,9,28,1,29,1,29,
1,29,5,29,436,8,29,10,29,12,29,439,9,29,1,29,5,29,442,8,29,10,29,12,29,445,
9,29,1,30,1,30,1,30,1,30,1,30,3,30,452,8,30,1,31,1,31,1,31,3,31,457,8,31,
1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,
36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,
1,41,1,42,1,42,1,42,1,43,1,43,5,43,494,8,43,10,43,12,43,497,9,43,1,43,1,
43,1,44,1,44,1,45,1,45,1,46,1,46,5,46,507,8,46,10,46,12,46,510,9,46,1,46,
1,46,1,47,1,47,1,47,1,47,5,47,518,8,47,10,47,12,47,521,9,47,1,48,1,48,1,
48,1,48,5,48,527,8,48,10,48,12,48,530,9,48,1,48,4,48,533,8,48,11,48,12,48,
534,1,49,1,49,1,49,1,49,1,49,3,49,542,8,49,1,50,1,50,1,50,1,50,1,50,3,50,
549,8,50,1,51,1,51,1,51,1,51,1,51,1,51,5,51,557,8,51,10,51,12,51,560,9,51,
1,52,1,52,1,52,1,52,1,52,1,52,5,52,568,8,52,10,52,12,52,571,9,52,1,53,1,
53,3,53,575,8,53,1,53,1,53,1,53,1,53,5,53,581,8,53,10,53,12,53,584,9,53,
1,54,1,54,3,54,588,8,54,1,54,1,54,1,54,1,54,1,55,1,55,5,55,596,8,55,10,55,
12,55,599,9,55,1,55,1,55,1,55,1,55,1,56,1,56,3,56,607,8,56,1,56,1,56,1,56,
3,56,612,8,56,1,56,3,56,615,8,56,1,57,1,57,3,57,619,8,57,1,57,1,57,1,57,
3,57,624,8,57,1,58,1,58,5,58,628,8,58,10,58,12,58,631,9,58,1,58,1,58,1,58,
3,58,636,8,58,1,59,1,59,1,59,1,59,5,59,642,8,59,10,59,12,59,645,9,59,1,59,
1,59,1,59,1,59,3,59,651,8,59,1,60,1,60,1,60,1,60,5,60,657,8,60,10,60,12,
60,660,9,60,1,60,1,60,1,60,5,60,665,8,60,10,60,12,60,668,9,60,1,60,1,60,
3,60,672,8,60,1,61,1,61,1,61,1,62,1,62,3,62,679,8,62,1,62,1,62,3,62,683,
8,62,1,63,1,63,3,63,687,8,63,1,64,1,64,1,64,1,64,3,64,693,8,64,1,65,1,65,
1,65,1,65,3,65,699,8,65,1,65,1,65,1,65,3,65,704,8,65,3,65,706,8,65,1,66,
1,66,1,66,1,67,1,67,1,67,1,67,5,67,715,8,67,10,67,12,67,718,9,67,1,68,1,
68,3,68,722,8,68,1,69,1,69,1,69,5,69,727,8,69,10,69,12,69,730,9,69,1,70,
1,70,1,70,3,70,735,8,70,1,71,1,71,1,72,1,72,1,72,1,72,1,72,3,72,744,8,72,
1,73,1,73,1,73,1,73,1,73,3,73,751,8,73,1,74,1,74,1,74,1,74,1,74,3,74,758,
8,74,1,75,1,75,1,76,1,76,1,77,1,77,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,
78,1,78,1,78,1,78,1,78,3,78,778,8,78,1,79,1,79,1,79,3,79,783,8,79,1,79,1,
79,5,79,787,8,79,10,79,12,79,790,9,79,1,80,1,80,3,80,794,8,80,1,81,1,81,
4,81,798,8,81,11,81,12,81,799,1,81,3,81,803,8,81,1,81,3,81,806,8,81,1,82,
3,82,809,8,82,1,82,1,82,3,82,813,8,82,1,83,1,83,1,83,1,83,1,84,1,84,3,84,
821,8,84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,3,88,831,8,88,1,89,1,89,
1,90,1,90,1,90,1,90,3,90,839,8,90,1,91,1,91,1,91,0,0,92,0,2,4,6,8,10,12,
14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,
144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,
180,182,0,14,2,0,62,62,73,73,2,0,78,78,80,80,2,0,79,79,81,81,2,0,1,4,6,12,
1,0,58,59,2,0,82,82,84,84,2,0,83,83,85,85,1,0,44,45,2,0,53,53,73,73,1,0,
25,30,1,0,32,35,1,0,61,62,1,0,42,43,3,0,26,31,36,49,52,52,904,0,187,1,0,
0,0,2,204,1,0,0,0,4,206,1,0,0,0,6,211,1,0,0,0,8,224,1,0,0,0,10,239,1,0,0,
0,12,254,1,0,0,0,14,272,1,0,0,0,16,284,1,0,0,0,18,289,1,0,0,0,20,291,1,0,
0,0,22,309,1,0,0,0,24,314,1,0,0,0,26,316,1,0,0,0,28,334,1,0,0,0,30,339,1,
0,0,0,32,341,1,0,0,0,34,358,1,0,0,0,36,365,1,0,0,0,38,367,1,0,0,0,40,384,
1,0,0,0,42,389,1,0,0,0,44,391,1,0,0,0,46,406,1,0,0,0,48,408,1,0,0,0,50,412,
1,0,0,0,52,421,1,0,0,0,54,423,1,0,0,0,56,425,1,0,0,0,58,432,1,0,0,0,60,451,
1,0,0,0,62,456,1,0,0,0,64,458,1,0,0,0,66,461,1,0,0,0,68,464,1,0,0,0,70,467,
1,0,0,0,72,470,1,0,0,0,74,473,1,0,0,0,76,476,1,0,0,0,78,479,1,0,0,0,80,482,
1,0,0,0,82,485,1,0,0,0,84,488,1,0,0,0,86,491,1,0,0,0,88,500,1,0,0,0,90,502,
1,0,0,0,92,504,1,0,0,0,94,513,1,0,0,0,96,522,1,0,0,0,98,536,1,0,0,0,100,
543,1,0,0,0,102,550,1,0,0,0,104,561,1,0,0,0,106,572,1,0,0,0,108,585,1,0,
0,0,110,593,1,0,0,0,112,604,1,0,0,0,114,616,1,0,0,0,116,625,1,0,0,0,118,
637,1,0,0,0,120,652,1,0,0,0,122,673,1,0,0,0,124,676,1,0,0,0,126,684,1,0,
0,0,128,688,1,0,0,0,130,694,1,0,0,0,132,707,1,0,0,0,134,710,1,0,0,0,136,
721,1,0,0,0,138,723,1,0,0,0,140,731,1,0,0,0,142,736,1,0,0,0,144,743,1,0,
0,0,146,750,1,0,0,0,148,757,1,0,0,0,150,759,1,0,0,0,152,761,1,0,0,0,154,
763,1,0,0,0,156,777,1,0,0,0,158,779,1,0,0,0,160,791,1,0,0,0,162,795,1,0,
0,0,164,808,1,0,0,0,166,814,1,0,0,0,168,818,1,0,0,0,170,822,1,0,0,0,172,
824,1,0,0,0,174,826,1,0,0,0,176,830,1,0,0,0,178,832,1,0,0,0,180,838,1,0,
0,0,182,840,1,0,0,0,184,186,3,2,1,0,185,184,1,0,0,0,186,189,1,0,0,0,187,
185,1,0,0,0,187,188,1,0,0,0,188,190,1,0,0,0,189,187,1,0,0,0,190,191,5,0,
0,1,191,1,1,0,0,0,192,205,3,4,2,0,193,205,3,6,3,0,194,205,3,8,4,0,195,205,
3,26,13,0,196,205,3,20,10,0,197,205,3,32,16,0,198,205,3,38,19,0,199,205,
3,44,22,0,200,205,3,48,24,0,201,205,3,58,29,0,202,205,3,10,5,0,203,205,3,
12,6,0,204,192,1,0,0,0,204,193,1,0,0,0,204,194,1,0,0,0,204,195,1,0,0,0,204,
196,1,0,0,0,204,197,1,0,0,0,204,198,1,0,0,0,204,199,1,0,0,0,204,200,1,0,
0,0,204,201,1,0,0,0,204,202,1,0,0,0,204,203,1,0,0,0,205,3,1,0,0,0,206,207,
5,1,0,0,207,208,3,146,73,0,208,209,5,53,0,0,209,210,7,0,0,0,210,5,1,0,0,
0,211,212,5,2,0,0,212,214,3,146,73,0,213,215,3,14,7,0,214,213,1,0,0,0,215,
216,1,0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,221,1,0,0,0,218,220,3,16,
8,0,219,218,1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,
7,1,0,0,0,223,221,1,0,0,0,224,225,5,3,0,0,225,230,3,146,73,0,226,229,3,14,
7,0,227,229,3,86,43,0,228,226,1,0,0,0,228,227,1,0,0,0,229,232,1,0,0,0,230,
228,1,0,0,0,230,231,1,0,0,0,231,236,1,0,0,0,232,230,1,0,0,0,233,235,3,16,
8,0,234,233,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,
9,1,0,0,0,238,236,1,0,0,0,239,240,5,11,0,0,240,245,3,146,73,0,241,244,3,
14,7,0,242,244,3,92,46,0,243,241,1,0,0,0,243,242,1,0,0,0,244,247,1,0,0,0,
245,243,1,0,0,0,245,246,1,0,0,0,246,251,1,0,0,0,247,245,1,0,0,0,248,250,
3,18,9,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,
252,11,1,0,0,0,253,251,1,0,0,0,254,255,5,12,0,0,255,259,3,146,73,0,256,258,
3,14,7,0,257,256,1,0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,
260,265,1,0,0,0,261,259,1,0,0,0,262,264,3,18,9,0,263,262,1,0,0,0,264,267,
1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,13,1,0,0,0,267,265,1,0,0,0,268,
273,3,64,32,0,269,273,3,66,33,0,270,273,3,68,34,0,271,273,3,70,35,0,272,
268,1,0,0,0,272,269,1,0,0,0,272,270,1,0,0,0,272,271,1,0,0,0,273,15,1,0,0,
0,274,285,3,94,47,0,275,285,3,96,48,0,276,285,3,98,49,0,277,285,3,100,50,
0,278,285,3,102,51,0,279,285,3,104,52,0,280,285,3,106,53,0,281,285,3,108,
54,0,282,285,3,114,57,0,283,285,3,122,61,0,284,274,1,0,0,0,284,275,1,0,0,
0,284,276,1,0,0,0,284,277,1,0,0,0,284,278,1,0,0,0,284,279,1,0,0,0,284,280,
1,0,0,0,284,281,1,0,0,0,284,282,1,0,0,0,284,283,1,0,0,0,285,17,1,0,0,0,286,
290,3,16,8,0,287,290,3,120,60,0,288,290,3,118,59,0,289,286,1,0,0,0,289,287,
1,0,0,0,289,288,1,0,0,0,290,19,1,0,0,0,291,292,5,4,0,0,292,296,3,146,73,
0,293,295,3,22,11,0,294,293,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,296,
297,1,0,0,0,297,302,1,0,0,0,298,296,1,0,0,0,299,301,3,24,12,0,300,299,1,
0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,302,303,1,0,0,0,303,21,1,0,0,0,304,
302,1,0,0,0,305,310,3,78,39,0,306,310,3,68,34,0,307,310,3,70,35,0,308,310,
3,80,40,0,309,305,1,0,0,0,309,306,1,0,0,0,309,307,1,0,0,0,309,308,1,0,0,
0,310,23,1,0,0,0,311,315,3,100,50,0,312,315,3,114,57,0,313,315,3,122,61,
0,314,311,1,0,0,0,314,312,1,0,0,0,314,313,1,0,0,0,315,25,1,0,0,0,316,317,
5,6,0,0,317,321,3,146,73,0,318,320,3,28,14,0,319,318,1,0,0,0,320,323,1,0,
0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,327,1,0,0,0,323,321,1,0,0,0,324,
326,3,30,15,0,325,324,1,0,0,0,326,329,1,0,0,0,327,325,1,0,0,0,327,328,1,
0,0,0,328,27,1,0,0,0,329,327,1,0,0,0,330,335,3,70,35,0,331,335,3,72,36,0,
332,335,3,74,37,0,333,335,3,76,38,0,334,330,1,0,0,0,334,331,1,0,0,0,334,
332,1,0,0,0,334,333,1,0,0,0,335,29,1,0,0,0,336,340,3,100,50,0,337,340,3,
114,57,0,338,340,3,122,61,0,339,336,1,0,0,0,339,337,1,0,0,0,339,338,1,0,
0,0,340,31,1,0,0,0,341,342,5,7,0,0,342,346,3,146,73,0,343,345,3,34,17,0,
344,343,1,0,0,0,345,348,1,0,0,0,346,344,1,0,0,0,346,347,1,0,0,0,347,352,
1,0,0,0,348,346,1,0,0,0,349,351,3,36,18,0,350,349,1,0,0,0,351,354,1,0,0,
0,352,350,1,0,0,0,352,353,1,0,0,0,353,33,1,0,0,0,354,352,1,0,0,0,355,359,
3,66,33,0,356,359,3,68,34,0,357,359,3,70,35,0,358,355,1,0,0,0,358,356,1,
0,0,0,358,357,1,0,0,0,359,35,1,0,0,0,360,366,3,124,62,0,361,366,3,108,54,
0,362,366,3,110,55,0,363,366,3,114,57,0,364,366,3,116,58,0,365,360,1,0,0,
0,365,361,1,0,0,0,365,362,1,0,0,0,365,363,1,0,0,0,365,364,1,0,0,0,366,37,
1,0,0,0,367,368,5,8,0,0,368,372,3,146,73,0,369,371,3,40,20,0,370,369,1,0,
0,0,371,374,1,0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,378,1,0,0,0,374,
372,1,0,0,0,375,377,3,42,21,0,376,375,1,0,0,0,377,380,1,0,0,0,378,376,1,
0,0,0,378,379,1,0,0,0,379,39,1,0,0,0,380,378,1,0,0,0,381,385,3,66,33,0,382,
385,3,68,34,0,383,385,3,70,35,0,384,381,1,0,0,0,384,382,1,0,0,0,384,383,
1,0,0,0,385,41,1,0,0,0,386,390,3,162,81,0,387,390,3,110,55,0,388,390,3,116,
58,0,389,386,1,0,0,0,389,387,1,0,0,0,389,388,1,0,0,0,390,43,1,0,0,0,391,
392,5,9,0,0,392,394,5,77,0,0,393,395,3,46,23,0,394,393,1,0,0,0,395,396,1,
0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,45,1,0,0,0,398,407,3,16,8,0,399,
407,3,120,60,0,400,407,3,118,59,0,401,407,3,162,81,0,402,407,3,110,55,0,
403,407,3,116,58,0,404,407,3,124,62,0,405,407,3,112,56,0,406,398,1,0,0,0,
406,399,1,0,0,0,406,400,1,0,0,0,406,401,1,0,0,0,406,402,1,0,0,0,406,403,
1,0,0,0,406,404,1,0,0,0,406,405,1,0,0,0,407,47,1,0,0,0,408,409,5,9,0,0,409,
410,3,50,25,0,410,411,3,56,28,0,411,49,1,0,0,0,412,416,5,76,0,0,413,415,
3,52,26,0,414,413,1,0,0,0,415,418,1,0,0,0,416,414,1,0,0,0,416,417,1,0,0,
0,417,419,1,0,0,0,418,416,1,0,0,0,419,420,3,54,27,0,420,51,1,0,0,0,421,422,
7,1,0,0,422,53,1,0,0,0,423,424,7,2,0,0,424,55,1,0,0,0,425,429,5,54,0,0,426,
428,8,3,0,0,427,426,1,0,0,0,428,431,1,0,0,0,429,427,1,0,0,0,429,430,1,0,
0,0,430,57,1,0,0,0,431,429,1,0,0,0,432,433,5,10,0,0,433,437,3,146,73,0,434,
436,3,60,30,0,435,434,1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,437,438,1,
0,0,0,438,443,1,0,0,0,439,437,1,0,0,0,440,442,3,62,31,0,441,440,1,0,0,0,
442,445,1,0,0,0,443,441,1,0,0,0,443,444,1,0,0,0,444,59,1,0,0,0,445,443,1,
0,0,0,446,452,3,66,33,0,447,452,3,82,41,0,448,452,3,84,42,0,449,452,3,70,
35,0,450,452,3,68,34,0,451,446,1,0,0,0,451,447,1,0,0,0,451,448,1,0,0,0,451,
449,1,0,0,0,451,450,1,0,0,0,452,61,1,0,0,0,453,457,3,112,56,0,454,457,3,
114,57,0,455,457,3,122,61,0,456,453,1,0,0,0,456,454,1,0,0,0,456,455,1,0,
0,0,457,63,1,0,0,0,458,459,5,13,0,0,459,460,3,146,73,0,460,65,1,0,0,0,461,
462,5,14,0,0,462,463,3,146,73,0,463,67,1,0,0,0,464,465,5,15,0,0,465,466,
5,58,0,0,466,69,1,0,0,0,467,468,5,16,0,0,468,469,7,4,0,0,469,71,1,0,0,0,
470,471,5,17,0,0,471,472,5,58,0,0,472,73,1,0,0,0,473,474,5,18,0,0,474,475,
5,58,0,0,475,75,1,0,0,0,476,477,5,19,0,0,477,478,5,62,0,0,478,77,1,0,0,0,
479,480,5,5,0,0,480,481,3,146,73,0,481,79,1,0,0,0,482,483,5,20,0,0,483,484,
5,62,0,0,484,81,1,0,0,0,485,486,5,21,0,0,486,487,3,146,73,0,487,83,1,0,0,
0,488,489,5,22,0,0,489,490,5,58,0,0,490,85,1,0,0,0,491,495,5,23,0,0,492,
494,3,88,44,0,493,492,1,0,0,0,494,497,1,0,0,0,495,493,1,0,0,0,495,496,1,
0,0,0,496,498,1,0,0,0,497,495,1,0,0,0,498,499,3,90,45,0,499,87,1,0,0,0,500,
501,7,5,0,0,501,89,1,0,0,0,502,503,7,6,0,0,503,91,1,0,0,0,504,508,5,24,0,
0,505,507,5,87,0,0,506,505,1,0,0,0,507,510,1,0,0,0,508,506,1,0,0,0,508,509,
1,0,0,0,509,511,1,0,0,0,510,508,1,0,0,0,511,512,5,88,0,0,512,93,1,0,0,0,
513,514,5,54,0,0,514,515,3,148,74,0,515,519,5,66,0,0,516,518,3,152,76,0,
517,516,1,0,0,0,518,521,1,0,0,0,519,517,1,0,0,0,519,520,1,0,0,0,520,95,1,
0,0,0,521,519,1,0,0,0,522,523,5,54,0,0,523,528,3,148,74,0,524,525,5,38,0,
0,525,527,3,148,74,0,526,524,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,528,
529,1,0,0,0,529,532,1,0,0,0,530,528,1,0,0,0,531,533,3,152,76,0,532,531,1,
0,0,0,533,534,1,0,0,0,534,532,1,0,0,0,534,535,1,0,0,0,535,97,1,0,0,0,536,
537,5,54,0,0,537,538,3,148,74,0,538,539,5,31,0,0,539,541,3,146,73,0,540,
542,3,154,77,0,541,540,1,0,0,0,541,542,1,0,0,0,542,99,1,0,0,0,543,544,5,
54,0,0,544,545,3,148,74,0,545,546,5,53,0,0,546,548,3,156,78,0,547,549,5,
50,0,0,548,547,1,0,0,0,548,549,1,0,0,0,549,101,1,0,0,0,550,551,5,54,0,0,
551,552,3,148,74,0,552,553,5,36,0,0,553,558,3,158,79,0,554,555,5,38,0,0,
555,557,3,158,79,0,556,554,1,0,0,0,557,560,1,0,0,0,558,556,1,0,0,0,558,559,
1,0,0,0,559,103,1,0,0,0,560,558,1,0,0,0,561,562,5,54,0,0,562,563,3,148,74,
0,563,564,5,39,0,0,564,569,3,180,90,0,565,566,5,40,0,0,566,568,3,180,90,
0,567,565,1,0,0,0,568,571,1,0,0,0,569,567,1,0,0,0,569,570,1,0,0,0,570,105,
1,0,0,0,571,569,1,0,0,0,572,574,5,54,0,0,573,575,3,148,74,0,574,573,1,0,
0,0,574,575,1,0,0,0,575,576,1,0,0,0,576,577,5,41,0,0,577,582,3,146,73,0,
578,579,5,38,0,0,579,581,3,146,73,0,580,578,1,0,0,0,581,584,1,0,0,0,582,
580,1,0,0,0,582,583,1,0,0,0,583,107,1,0,0,0,584,582,1,0,0,0,585,587,5,54,
0,0,586,588,3,148,74,0,587,586,1,0,0,0,587,588,1,0,0,0,588,589,1,0,0,0,589,
590,3,150,75,0,590,591,5,53,0,0,591,592,3,156,78,0,592,109,1,0,0,0,593,597,
5,54,0,0,594,596,5,62,0,0,595,594,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,
0,597,598,1,0,0,0,598,600,1,0,0,0,599,597,1,0,0,0,600,601,3,150,75,0,601,
602,5,53,0,0,602,603,3,156,78,0,603,111,1,0,0,0,604,606,5,54,0,0,605,607,
3,148,74,0,606,605,1,0,0,0,606,607,1,0,0,0,607,608,1,0,0,0,608,609,5,57,
0,0,609,611,5,58,0,0,610,612,5,58,0,0,611,610,1,0,0,0,611,612,1,0,0,0,612,
614,1,0,0,0,613,615,5,62,0,0,614,613,1,0,0,0,614,615,1,0,0,0,615,113,1,0,
0,0,616,618,5,54,0,0,617,619,3,148,74,0,618,617,1,0,0,0,618,619,1,0,0,0,
619,620,1,0,0,0,620,623,5,51,0,0,621,624,5,77,0,0,622,624,3,50,25,0,623,
621,1,0,0,0,623,622,1,0,0,0,624,115,1,0,0,0,625,629,5,54,0,0,626,628,5,62,
0,0,627,626,1,0,0,0,628,631,1,0,0,0,629,627,1,0,0,0,629,630,1,0,0,0,630,
632,1,0,0,0,631,629,1,0,0,0,632,635,5,51,0,0,633,636,5,77,0,0,634,636,3,
50,25,0,635,633,1,0,0,0,635,634,1,0,0,0,636,117,1,0,0,0,637,638,5,54,0,0,
638,639,3,148,74,0,639,643,5,66,0,0,640,642,3,152,76,0,641,640,1,0,0,0,642,
645,1,0,0,0,643,641,1,0,0,0,643,644,1,0,0,0,644,646,1,0,0,0,645,643,1,0,
0,0,646,647,5,52,0,0,647,648,7,0,0,0,648,650,5,58,0,0,649,651,7,4,0,0,650,
649,1,0,0,0,650,651,1,0,0,0,651,119,1,0,0,0,652,653,5,54,0,0,653,654,3,148,
74,0,654,658,5,66,0,0,655,657,3,152,76,0,656,655,1,0,0,0,657,660,1,0,0,0,
658,656,1,0,0,0,658,659,1,0,0,0,659,661,1,0,0,0,660,658,1,0,0,0,661,666,
3,180,90,0,662,663,5,40,0,0,663,665,3,180,90,0,664,662,1,0,0,0,665,668,1,
0,0,0,666,664,1,0,0,0,666,667,1,0,0,0,667,669,1,0,0,0,668,666,1,0,0,0,669,
671,5,58,0,0,670,672,7,4,0,0,671,670,1,0,0,0,671,672,1,0,0,0,672,121,1,0,
0,0,673,674,5,54,0,0,674,675,3,148,74,0,675,123,1,0,0,0,676,678,5,54,0,0,
677,679,7,7,0,0,678,677,1,0,0,0,678,679,1,0,0,0,679,682,1,0,0,0,680,683,
3,126,63,0,681,683,3,128,64,0,682,680,1,0,0,0,682,681,1,0,0,0,683,125,1,
0,0,0,684,686,3,160,80,0,685,687,3,130,65,0,686,685,1,0,0,0,686,687,1,0,
0,0,687,127,1,0,0,0,688,689,5,46,0,0,689,692,3,130,65,0,690,691,5,47,0,0,
691,693,3,138,69,0,692,690,1,0,0,0,692,693,1,0,0,0,693,129,1,0,0,0,694,705,
5,31,0,0,695,698,3,132,66,0,696,697,5,38,0,0,697,699,3,134,67,0,698,696,
1,0,0,0,698,699,1,0,0,0,699,706,1,0,0,0,700,703,3,134,67,0,701,702,5,38,
0,0,702,704,3,132,66,0,703,701,1,0,0,0,703,704,1,0,0,0,704,706,1,0,0,0,705,
695,1,0,0,0,705,700,1,0,0,0,706,131,1,0,0,0,707,708,5,49,0,0,708,709,3,136,
68,0,709,133,1,0,0,0,710,711,5,48,0,0,711,716,3,136,68,0,712,713,5,38,0,
0,713,715,3,136,68,0,714,712,1,0,0,0,715,718,1,0,0,0,716,714,1,0,0,0,716,
717,1,0,0,0,717,135,1,0,0,0,718,716,1,0,0,0,719,722,3,146,73,0,720,722,5,
62,0,0,721,719,1,0,0,0,721,720,1,0,0,0,722,137,1,0,0,0,723,728,3,140,70,
0,724,725,5,38,0,0,725,727,3,140,70,0,726,724,1,0,0,0,727,730,1,0,0,0,728,
726,1,0,0,0,728,729,1,0,0,0,729,139,1,0,0,0,730,728,1,0,0,0,731,732,3,146,
73,0,732,734,3,142,71,0,733,735,3,144,72,0,734,733,1,0,0,0,734,735,1,0,0,
0,735,141,1,0,0,0,736,737,7,8,0,0,737,143,1,0,0,0,738,744,3,160,80,0,739,
744,5,42,0,0,740,744,5,43,0,0,741,744,5,71,0,0,742,744,5,58,0,0,743,738,
1,0,0,0,743,739,1,0,0,0,743,740,1,0,0,0,743,741,1,0,0,0,743,742,1,0,0,0,
744,145,1,0,0,0,745,751,5,73,0,0,746,751,5,60,0,0,747,751,5,64,0,0,748,751,
5,65,0,0,749,751,3,182,91,0,750,745,1,0,0,0,750,746,1,0,0,0,750,747,1,0,
0,0,750,748,1,0,0,0,750,749,1,0,0,0,751,147,1,0,0,0,752,758,5,73,0,0,753,
758,5,60,0,0,754,758,5,64,0,0,755,758,5,65,0,0,756,758,3,182,91,0,757,752,
1,0,0,0,757,753,1,0,0,0,757,754,1,0,0,0,757,755,1,0,0,0,757,756,1,0,0,0,
758,149,1,0,0,0,759,760,5,70,0,0,760,151,1,0,0,0,761,762,7,9,0,0,762,153,
1,0,0,0,763,764,7,10,0,0,764,155,1,0,0,0,765,778,5,58,0,0,766,778,5,59,0,
0,767,778,5,60,0,0,768,778,5,64,0,0,769,778,5,65,0,0,770,778,3,168,84,0,
771,778,3,174,87,0,772,778,3,160,80,0,773,778,3,164,82,0,774,778,3,166,83,
0,775,778,3,178,89,0,776,778,3,146,73,0,777,765,1,0,0,0,777,766,1,0,0,0,
777,767,1,0,0,0,777,768,1,0,0,0,777,769,1,0,0,0,777,770,1,0,0,0,777,771,
1,0,0,0,777,772,1,0,0,0,777,773,1,0,0,0,777,774,1,0,0,0,777,775,1,0,0,0,
777,776,1,0,0,0,778,157,1,0,0,0,779,782,3,146,73,0,780,781,5,37,0,0,781,
783,3,146,73,0,782,780,1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,788,5,
66,0,0,785,787,3,152,76,0,786,785,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,
0,788,789,1,0,0,0,789,159,1,0,0,0,790,788,1,0,0,0,791,793,5,62,0,0,792,794,
5,58,0,0,793,792,1,0,0,0,793,794,1,0,0,0,794,161,1,0,0,0,795,797,5,54,0,
0,796,798,5,62,0,0,797,796,1,0,0,0,798,799,1,0,0,0,799,797,1,0,0,0,799,800,
1,0,0,0,800,802,1,0,0,0,801,803,5,58,0,0,802,801,1,0,0,0,802,803,1,0,0,0,
803,805,1,0,0,0,804,806,7,4,0,0,805,804,1,0,0,0,805,806,1,0,0,0,806,163,
1,0,0,0,807,809,5,60,0,0,808,807,1,0,0,0,808,809,1,0,0,0,809,810,1,0,0,0,
810,812,7,11,0,0,811,813,5,58,0,0,812,811,1,0,0,0,812,813,1,0,0,0,813,165,
1,0,0,0,814,815,3,176,88,0,815,816,5,55,0,0,816,817,3,176,88,0,817,167,1,
0,0,0,818,820,5,67,0,0,819,821,5,58,0,0,820,819,1,0,0,0,820,821,1,0,0,0,
821,169,1,0,0,0,822,823,5,67,0,0,823,171,1,0,0,0,824,825,5,68,0,0,825,173,
1,0,0,0,826,827,5,69,0,0,827,175,1,0,0,0,828,831,5,60,0,0,829,831,3,164,
82,0,830,828,1,0,0,0,830,829,1,0,0,0,831,177,1,0,0,0,832,833,7,12,0,0,833,
179,1,0,0,0,834,839,3,146,73,0,835,839,3,170,85,0,836,839,3,174,87,0,837,
839,3,172,86,0,838,834,1,0,0,0,838,835,1,0,0,0,838,836,1,0,0,0,838,837,1,
0,0,0,839,181,1,0,0,0,840,841,7,13,0,0,841,183,1,0,0,0,90,187,204,216,221,
228,230,236,243,245,251,259,265,272,284,289,296,302,309,314,321,327,334,
339,346,352,358,365,372,378,384,389,396,406,416,429,437,443,451,456,495,
508,519,528,534,541,548,558,569,574,582,587,597,606,611,614,618,623,629,
635,643,650,658,666,671,678,682,686,692,698,703,705,716,721,728,734,743,
750,757,777,782,788,793,799,802,805,808,812,820,830,838];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class FSHParser extends antlr4.Parser {

    static grammarFileName = "FSH.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, "'?!'", "'MS'", "'SU'", "'TU'", "'N'", 
                            "'D'", "'from'", null, null, null, null, "'contains'", 
                            "'named'", "'and'", "'only'", "'or'", "'obeys'", 
                            "'true'", "'false'", "'include'", "'exclude'", 
                            "'codes'", "'where'", "'valueset'", "'system'", 
                            null, "'insert'", "'contentReference'", "'='", 
                            null, "':'", "','", "'->'" ];
    static symbolicNames = [ null, "KW_ALIAS", "KW_PROFILE", "KW_EXTENSION", 
                             "KW_INSTANCE", "KW_INSTANCEOF", "KW_INVARIANT", 
                             "KW_VALUESET", "KW_CODESYSTEM", "KW_RULESET", 
                             "KW_MAPPING", "KW_LOGICAL", "KW_RESOURCE", 
                             "KW_PARENT", "KW_ID", "KW_TITLE", "KW_DESCRIPTION", 
                             "KW_EXPRESSION", "KW_XPATH", "KW_SEVERITY", 
                             "KW_USAGE", "KW_SOURCE", "KW_TARGET", "KW_CONTEXT", 
                             "KW_CHARACTERISTICS", "KW_MOD", "KW_MS", "KW_SU", 
                             "KW_TU", "KW_NORMATIVE", "KW_DRAFT", "KW_FROM", 
                             "KW_EXAMPLE", "KW_PREFERRED", "KW_EXTENSIBLE", 
                             "KW_REQUIRED", "KW_CONTAINS", "KW_NAMED", "KW_AND", 
                             "KW_ONLY", "KW_OR", "KW_OBEYS", "KW_TRUE", 
                             "KW_FALSE", "KW_INCLUDE", "KW_EXCLUDE", "KW_CODES", 
                             "KW_WHERE", "KW_VSREFERENCE", "KW_SYSTEM", 
                             "KW_EXACTLY", "KW_INSERT", "KW_CONTENTREFERENCE", 
                             "EQUAL", "STAR", "COLON", "COMMA", "ARROW", 
                             "STRING", "MULTILINE_STRING", "NUMBER", "UNIT", 
                             "CODE", "CONCEPT_STRING", "DATETIME", "TIME", 
                             "CARD", "REFERENCE", "CODEABLE_REFERENCE", 
                             "CANONICAL", "CARET_SEQUENCE", "REGEX", "BLOCK_COMMENT", 
                             "SEQUENCE", "WHITESPACE", "LINE_COMMENT", "PARAM_RULESET_REFERENCE", 
                             "RULESET_REFERENCE", "BRACKETED_PARAM", "LAST_BRACKETED_PARAM", 
                             "PLAIN_PARAM", "LAST_PLAIN_PARAM", "QUOTED_CONTEXT", 
                             "LAST_QUOTED_CONTEXT", "UNQUOTED_CONTEXT", 
                             "LAST_UNQUOTED_CONTEXT", "CONTEXT_WHITESPACE", 
                             "CODE_ITEM", "LAST_CODE_ITEM", "CODE_LIST_WHITESPACE" ];
    static ruleNames = [ "doc", "entity", "alias", "profile", "extension", 
                         "logical", "resource", "sdMetadata", "sdRule", 
                         "lrRule", "instance", "instanceMetadata", "instanceRule", 
                         "invariant", "invariantMetadata", "invariantRule", 
                         "valueSet", "vsMetadata", "vsRule", "codeSystem", 
                         "csMetadata", "csRule", "ruleSet", "ruleSetRule", 
                         "paramRuleSet", "paramRuleSetRef", "parameter", 
                         "lastParameter", "paramRuleSetContent", "mapping", 
                         "mappingMetadata", "mappingEntityRule", "parent", 
                         "id", "title", "description", "expression", "xpath", 
                         "severity", "instanceOf", "usage", "source", "target", 
                         "context", "contextItem", "lastContextItem", "characteristics", 
                         "cardRule", "flagRule", "valueSetRule", "fixedValueRule", 
                         "containsRule", "onlyRule", "obeysRule", "caretValueRule", 
                         "codeCaretValueRule", "mappingRule", "insertRule", 
                         "codeInsertRule", "addCRElementRule", "addElementRule", 
                         "pathRule", "vsComponent", "vsConceptComponent", 
                         "vsFilterComponent", "vsComponentFrom", "vsFromSystem", 
                         "vsFromValueset", "vsFromTarget", "vsFilterList", 
                         "vsFilterDefinition", "vsFilterOperator", "vsFilterValue", 
                         "name", "path", "caretPath", "flag", "strength", 
                         "value", "item", "code", "concept", "quantity", 
                         "ratio", "reference", "referenceType", "codeableReferenceType", 
                         "canonical", "ratioPart", "bool", "targetType", 
                         "mostAlphaKeywords" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = FSHParser.ruleNames;
        this.literalNames = FSHParser.literalNames;
        this.symbolicNames = FSHParser.symbolicNames;
    }



	doc() {
	    let localctx = new DocContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, FSHParser.RULE_doc);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 187;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 8158) !== 0)) {
	            this.state = 184;
	            this.entity();
	            this.state = 189;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 190;
	        this.match(FSHParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	entity() {
	    let localctx = new EntityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, FSHParser.RULE_entity);
	    try {
	        this.state = 204;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 192;
	            this.alias();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 193;
	            this.profile();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 194;
	            this.extension();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 195;
	            this.invariant();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 196;
	            this.instance();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 197;
	            this.valueSet();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 198;
	            this.codeSystem();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 199;
	            this.ruleSet();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 200;
	            this.paramRuleSet();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 201;
	            this.mapping();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 202;
	            this.logical();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 203;
	            this.resource();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alias() {
	    let localctx = new AliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, FSHParser.RULE_alias);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 206;
	        this.match(FSHParser.KW_ALIAS);
	        this.state = 207;
	        this.name();
	        this.state = 208;
	        this.match(FSHParser.EQUAL);
	        this.state = 209;
	        _la = this._input.LA(1);
	        if(!(_la===62 || _la===73)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	profile() {
	    let localctx = new ProfileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, FSHParser.RULE_profile);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 211;
	        this.match(FSHParser.KW_PROFILE);
	        this.state = 212;
	        this.name();
	        this.state = 214; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 213;
	            this.sdMetadata();
	            this.state = 216; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 122880) !== 0));
	        this.state = 221;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===54) {
	            this.state = 218;
	            this.sdRule();
	            this.state = 223;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	extension() {
	    let localctx = new ExtensionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, FSHParser.RULE_extension);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 224;
	        this.match(FSHParser.KW_EXTENSION);
	        this.state = 225;
	        this.name();
	        this.state = 230;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 8511488) !== 0)) {
	            this.state = 228;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 13:
	            case 14:
	            case 15:
	            case 16:
	                this.state = 226;
	                this.sdMetadata();
	                break;
	            case 23:
	                this.state = 227;
	                this.context();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 232;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 236;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===54) {
	            this.state = 233;
	            this.sdRule();
	            this.state = 238;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logical() {
	    let localctx = new LogicalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, FSHParser.RULE_logical);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 239;
	        this.match(FSHParser.KW_LOGICAL);
	        this.state = 240;
	        this.name();
	        this.state = 245;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 16900096) !== 0)) {
	            this.state = 243;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 13:
	            case 14:
	            case 15:
	            case 16:
	                this.state = 241;
	                this.sdMetadata();
	                break;
	            case 24:
	                this.state = 242;
	                this.characteristics();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 247;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 251;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===54) {
	            this.state = 248;
	            this.lrRule();
	            this.state = 253;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resource() {
	    let localctx = new ResourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, FSHParser.RULE_resource);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 254;
	        this.match(FSHParser.KW_RESOURCE);
	        this.state = 255;
	        this.name();
	        this.state = 259;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 122880) !== 0)) {
	            this.state = 256;
	            this.sdMetadata();
	            this.state = 261;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 265;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===54) {
	            this.state = 262;
	            this.lrRule();
	            this.state = 267;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sdMetadata() {
	    let localctx = new SdMetadataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, FSHParser.RULE_sdMetadata);
	    try {
	        this.state = 272;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 13:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 268;
	            this.parent();
	            break;
	        case 14:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 269;
	            this.id();
	            break;
	        case 15:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 270;
	            this.title();
	            break;
	        case 16:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 271;
	            this.description();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sdRule() {
	    let localctx = new SdRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, FSHParser.RULE_sdRule);
	    try {
	        this.state = 284;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 274;
	            this.cardRule();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 275;
	            this.flagRule();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 276;
	            this.valueSetRule();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 277;
	            this.fixedValueRule();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 278;
	            this.containsRule();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 279;
	            this.onlyRule();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 280;
	            this.obeysRule();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 281;
	            this.caretValueRule();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 282;
	            this.insertRule();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 283;
	            this.pathRule();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lrRule() {
	    let localctx = new LrRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, FSHParser.RULE_lrRule);
	    try {
	        this.state = 289;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 286;
	            this.sdRule();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 287;
	            this.addElementRule();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 288;
	            this.addCRElementRule();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instance() {
	    let localctx = new InstanceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, FSHParser.RULE_instance);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 291;
	        this.match(FSHParser.KW_INSTANCE);
	        this.state = 292;
	        this.name();
	        this.state = 296;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 1146912) !== 0)) {
	            this.state = 293;
	            this.instanceMetadata();
	            this.state = 298;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 302;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===54) {
	            this.state = 299;
	            this.instanceRule();
	            this.state = 304;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instanceMetadata() {
	    let localctx = new InstanceMetadataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, FSHParser.RULE_instanceMetadata);
	    try {
	        this.state = 309;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 5:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 305;
	            this.instanceOf();
	            break;
	        case 15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 306;
	            this.title();
	            break;
	        case 16:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 307;
	            this.description();
	            break;
	        case 20:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 308;
	            this.usage();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instanceRule() {
	    let localctx = new InstanceRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, FSHParser.RULE_instanceRule);
	    try {
	        this.state = 314;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 311;
	            this.fixedValueRule();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 312;
	            this.insertRule();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 313;
	            this.pathRule();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invariant() {
	    let localctx = new InvariantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, FSHParser.RULE_invariant);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 316;
	        this.match(FSHParser.KW_INVARIANT);
	        this.state = 317;
	        this.name();
	        this.state = 321;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 983040) !== 0)) {
	            this.state = 318;
	            this.invariantMetadata();
	            this.state = 323;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 327;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===54) {
	            this.state = 324;
	            this.invariantRule();
	            this.state = 329;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invariantMetadata() {
	    let localctx = new InvariantMetadataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, FSHParser.RULE_invariantMetadata);
	    try {
	        this.state = 334;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 16:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 330;
	            this.description();
	            break;
	        case 17:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 331;
	            this.expression();
	            break;
	        case 18:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 332;
	            this.xpath();
	            break;
	        case 19:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 333;
	            this.severity();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	invariantRule() {
	    let localctx = new InvariantRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, FSHParser.RULE_invariantRule);
	    try {
	        this.state = 339;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 336;
	            this.fixedValueRule();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 337;
	            this.insertRule();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 338;
	            this.pathRule();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueSet() {
	    let localctx = new ValueSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, FSHParser.RULE_valueSet);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 341;
	        this.match(FSHParser.KW_VALUESET);
	        this.state = 342;
	        this.name();
	        this.state = 346;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 114688) !== 0)) {
	            this.state = 343;
	            this.vsMetadata();
	            this.state = 348;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 352;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===54) {
	            this.state = 349;
	            this.vsRule();
	            this.state = 354;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vsMetadata() {
	    let localctx = new VsMetadataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, FSHParser.RULE_vsMetadata);
	    try {
	        this.state = 358;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 355;
	            this.id();
	            break;
	        case 15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 356;
	            this.title();
	            break;
	        case 16:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 357;
	            this.description();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vsRule() {
	    let localctx = new VsRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, FSHParser.RULE_vsRule);
	    try {
	        this.state = 365;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,26,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 360;
	            this.vsComponent();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 361;
	            this.caretValueRule();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 362;
	            this.codeCaretValueRule();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 363;
	            this.insertRule();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 364;
	            this.codeInsertRule();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	codeSystem() {
	    let localctx = new CodeSystemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, FSHParser.RULE_codeSystem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 367;
	        this.match(FSHParser.KW_CODESYSTEM);
	        this.state = 368;
	        this.name();
	        this.state = 372;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 114688) !== 0)) {
	            this.state = 369;
	            this.csMetadata();
	            this.state = 374;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 378;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===54) {
	            this.state = 375;
	            this.csRule();
	            this.state = 380;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csMetadata() {
	    let localctx = new CsMetadataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, FSHParser.RULE_csMetadata);
	    try {
	        this.state = 384;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 381;
	            this.id();
	            break;
	        case 15:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 382;
	            this.title();
	            break;
	        case 16:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 383;
	            this.description();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	csRule() {
	    let localctx = new CsRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, FSHParser.RULE_csRule);
	    try {
	        this.state = 389;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 386;
	            this.concept();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 387;
	            this.codeCaretValueRule();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 388;
	            this.codeInsertRule();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleSet() {
	    let localctx = new RuleSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, FSHParser.RULE_ruleSet);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 391;
	        this.match(FSHParser.KW_RULESET);
	        this.state = 392;
	        this.match(FSHParser.RULESET_REFERENCE);
	        this.state = 394; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 393;
	            this.ruleSetRule();
	            this.state = 396; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===54);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ruleSetRule() {
	    let localctx = new RuleSetRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, FSHParser.RULE_ruleSetRule);
	    try {
	        this.state = 406;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 398;
	            this.sdRule();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 399;
	            this.addElementRule();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 400;
	            this.addCRElementRule();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 401;
	            this.concept();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 402;
	            this.codeCaretValueRule();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 403;
	            this.codeInsertRule();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 404;
	            this.vsComponent();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 405;
	            this.mappingRule();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paramRuleSet() {
	    let localctx = new ParamRuleSetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, FSHParser.RULE_paramRuleSet);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 408;
	        this.match(FSHParser.KW_RULESET);
	        this.state = 409;
	        this.paramRuleSetRef();
	        this.state = 410;
	        this.paramRuleSetContent();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paramRuleSetRef() {
	    let localctx = new ParamRuleSetRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, FSHParser.RULE_paramRuleSetRef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 412;
	        this.match(FSHParser.PARAM_RULESET_REFERENCE);
	        this.state = 416;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===78 || _la===80) {
	            this.state = 413;
	            this.parameter();
	            this.state = 418;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 419;
	        this.lastParameter();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameter() {
	    let localctx = new ParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, FSHParser.RULE_parameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 421;
	        _la = this._input.LA(1);
	        if(!(_la===78 || _la===80)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lastParameter() {
	    let localctx = new LastParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, FSHParser.RULE_lastParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 423;
	        _la = this._input.LA(1);
	        if(!(_la===79 || _la===81)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	paramRuleSetContent() {
	    let localctx = new ParamRuleSetContentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, FSHParser.RULE_paramRuleSetContent);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 425;
	        this.match(FSHParser.STAR);
	        this.state = 429;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 4294959136) !== 0) || ((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 4294967295) !== 0) || ((((_la - 64)) & ~0x1f) === 0 && ((1 << (_la - 64)) & 67108863) !== 0)) {
	            this.state = 426;
	            _la = this._input.LA(1);
	            if(_la<=0 || (((_la) & ~0x1f) === 0 && ((1 << _la) & 8158) !== 0)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 431;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mapping() {
	    let localctx = new MappingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, FSHParser.RULE_mapping);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 432;
	        this.match(FSHParser.KW_MAPPING);
	        this.state = 433;
	        this.name();
	        this.state = 437;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 6406144) !== 0)) {
	            this.state = 434;
	            this.mappingMetadata();
	            this.state = 439;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 443;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===54) {
	            this.state = 440;
	            this.mappingEntityRule();
	            this.state = 445;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mappingMetadata() {
	    let localctx = new MappingMetadataContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, FSHParser.RULE_mappingMetadata);
	    try {
	        this.state = 451;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 446;
	            this.id();
	            break;
	        case 21:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 447;
	            this.source();
	            break;
	        case 22:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 448;
	            this.target();
	            break;
	        case 16:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 449;
	            this.description();
	            break;
	        case 15:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 450;
	            this.title();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mappingEntityRule() {
	    let localctx = new MappingEntityRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, FSHParser.RULE_mappingEntityRule);
	    try {
	        this.state = 456;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 453;
	            this.mappingRule();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 454;
	            this.insertRule();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 455;
	            this.pathRule();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parent() {
	    let localctx = new ParentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, FSHParser.RULE_parent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 458;
	        this.match(FSHParser.KW_PARENT);
	        this.state = 459;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	id() {
	    let localctx = new IdContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, FSHParser.RULE_id);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 461;
	        this.match(FSHParser.KW_ID);
	        this.state = 462;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	title() {
	    let localctx = new TitleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, FSHParser.RULE_title);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 464;
	        this.match(FSHParser.KW_TITLE);
	        this.state = 465;
	        this.match(FSHParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	description() {
	    let localctx = new DescriptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, FSHParser.RULE_description);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 467;
	        this.match(FSHParser.KW_DESCRIPTION);
	        this.state = 468;
	        _la = this._input.LA(1);
	        if(!(_la===58 || _la===59)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	expression() {
	    let localctx = new ExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, FSHParser.RULE_expression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 470;
	        this.match(FSHParser.KW_EXPRESSION);
	        this.state = 471;
	        this.match(FSHParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xpath() {
	    let localctx = new XpathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, FSHParser.RULE_xpath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 473;
	        this.match(FSHParser.KW_XPATH);
	        this.state = 474;
	        this.match(FSHParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	severity() {
	    let localctx = new SeverityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, FSHParser.RULE_severity);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 476;
	        this.match(FSHParser.KW_SEVERITY);
	        this.state = 477;
	        this.match(FSHParser.CODE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	instanceOf() {
	    let localctx = new InstanceOfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, FSHParser.RULE_instanceOf);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 479;
	        this.match(FSHParser.KW_INSTANCEOF);
	        this.state = 480;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usage() {
	    let localctx = new UsageContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, FSHParser.RULE_usage);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 482;
	        this.match(FSHParser.KW_USAGE);
	        this.state = 483;
	        this.match(FSHParser.CODE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	source() {
	    let localctx = new SourceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, FSHParser.RULE_source);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 485;
	        this.match(FSHParser.KW_SOURCE);
	        this.state = 486;
	        this.name();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	target() {
	    let localctx = new TargetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, FSHParser.RULE_target);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 488;
	        this.match(FSHParser.KW_TARGET);
	        this.state = 489;
	        this.match(FSHParser.STRING);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	context() {
	    let localctx = new ContextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, FSHParser.RULE_context);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 491;
	        this.match(FSHParser.KW_CONTEXT);
	        this.state = 495;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===82 || _la===84) {
	            this.state = 492;
	            this.contextItem();
	            this.state = 497;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 498;
	        this.lastContextItem();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	contextItem() {
	    let localctx = new ContextItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, FSHParser.RULE_contextItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 500;
	        _la = this._input.LA(1);
	        if(!(_la===82 || _la===84)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lastContextItem() {
	    let localctx = new LastContextItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, FSHParser.RULE_lastContextItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 502;
	        _la = this._input.LA(1);
	        if(!(_la===83 || _la===85)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	characteristics() {
	    let localctx = new CharacteristicsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, FSHParser.RULE_characteristics);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 504;
	        this.match(FSHParser.KW_CHARACTERISTICS);
	        this.state = 508;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===87) {
	            this.state = 505;
	            this.match(FSHParser.CODE_ITEM);
	            this.state = 510;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 511;
	        this.match(FSHParser.LAST_CODE_ITEM);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cardRule() {
	    let localctx = new CardRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, FSHParser.RULE_cardRule);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 513;
	        this.match(FSHParser.STAR);
	        this.state = 514;
	        this.path();
	        this.state = 515;
	        this.match(FSHParser.CARD);
	        this.state = 519;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2113929216) !== 0)) {
	            this.state = 516;
	            this.flag();
	            this.state = 521;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flagRule() {
	    let localctx = new FlagRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, FSHParser.RULE_flagRule);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 522;
	        this.match(FSHParser.STAR);
	        this.state = 523;
	        this.path();
	        this.state = 528;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===38) {
	            this.state = 524;
	            this.match(FSHParser.KW_AND);
	            this.state = 525;
	            this.path();
	            this.state = 530;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 532; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 531;
	            this.flag();
	            this.state = 534; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2113929216) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueSetRule() {
	    let localctx = new ValueSetRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, FSHParser.RULE_valueSetRule);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 536;
	        this.match(FSHParser.STAR);
	        this.state = 537;
	        this.path();
	        this.state = 538;
	        this.match(FSHParser.KW_FROM);
	        this.state = 539;
	        this.name();
	        this.state = 541;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 15) !== 0)) {
	            this.state = 540;
	            this.strength();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fixedValueRule() {
	    let localctx = new FixedValueRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, FSHParser.RULE_fixedValueRule);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 543;
	        this.match(FSHParser.STAR);
	        this.state = 544;
	        this.path();
	        this.state = 545;
	        this.match(FSHParser.EQUAL);
	        this.state = 546;
	        this.value();
	        this.state = 548;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===50) {
	            this.state = 547;
	            this.match(FSHParser.KW_EXACTLY);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	containsRule() {
	    let localctx = new ContainsRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, FSHParser.RULE_containsRule);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 550;
	        this.match(FSHParser.STAR);
	        this.state = 551;
	        this.path();
	        this.state = 552;
	        this.match(FSHParser.KW_CONTAINS);
	        this.state = 553;
	        this.item();
	        this.state = 558;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===38) {
	            this.state = 554;
	            this.match(FSHParser.KW_AND);
	            this.state = 555;
	            this.item();
	            this.state = 560;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onlyRule() {
	    let localctx = new OnlyRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, FSHParser.RULE_onlyRule);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 561;
	        this.match(FSHParser.STAR);
	        this.state = 562;
	        this.path();
	        this.state = 563;
	        this.match(FSHParser.KW_ONLY);
	        this.state = 564;
	        this.targetType();
	        this.state = 569;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===40) {
	            this.state = 565;
	            this.match(FSHParser.KW_OR);
	            this.state = 566;
	            this.targetType();
	            this.state = 571;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	obeysRule() {
	    let localctx = new ObeysRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, FSHParser.RULE_obeysRule);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 572;
	        this.match(FSHParser.STAR);
	        this.state = 574;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	        if(la_===1) {
	            this.state = 573;
	            this.path();

	        }
	        this.state = 576;
	        this.match(FSHParser.KW_OBEYS);
	        this.state = 577;
	        this.name();
	        this.state = 582;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===38) {
	            this.state = 578;
	            this.match(FSHParser.KW_AND);
	            this.state = 579;
	            this.name();
	            this.state = 584;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caretValueRule() {
	    let localctx = new CaretValueRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, FSHParser.RULE_caretValueRule);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 585;
	        this.match(FSHParser.STAR);
	        this.state = 587;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 26)) & ~0x1f) === 0 && ((1 << (_la - 26)) & 83885119) !== 0) || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 8241) !== 0)) {
	            this.state = 586;
	            this.path();
	        }

	        this.state = 589;
	        this.caretPath();
	        this.state = 590;
	        this.match(FSHParser.EQUAL);
	        this.state = 591;
	        this.value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	codeCaretValueRule() {
	    let localctx = new CodeCaretValueRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, FSHParser.RULE_codeCaretValueRule);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 593;
	        this.match(FSHParser.STAR);
	        this.state = 597;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===62) {
	            this.state = 594;
	            this.match(FSHParser.CODE);
	            this.state = 599;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 600;
	        this.caretPath();
	        this.state = 601;
	        this.match(FSHParser.EQUAL);
	        this.state = 602;
	        this.value();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mappingRule() {
	    let localctx = new MappingRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, FSHParser.RULE_mappingRule);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 604;
	        this.match(FSHParser.STAR);
	        this.state = 606;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 26)) & ~0x1f) === 0 && ((1 << (_la - 26)) & 83885119) !== 0) || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 8241) !== 0)) {
	            this.state = 605;
	            this.path();
	        }

	        this.state = 608;
	        this.match(FSHParser.ARROW);
	        this.state = 609;
	        this.match(FSHParser.STRING);
	        this.state = 611;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 610;
	            this.match(FSHParser.STRING);
	        }

	        this.state = 614;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===62) {
	            this.state = 613;
	            this.match(FSHParser.CODE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertRule() {
	    let localctx = new InsertRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, FSHParser.RULE_insertRule);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 616;
	        this.match(FSHParser.STAR);
	        this.state = 618;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 26)) & ~0x1f) === 0 && ((1 << (_la - 26)) & 83885119) !== 0) || ((((_la - 60)) & ~0x1f) === 0 && ((1 << (_la - 60)) & 8241) !== 0)) {
	            this.state = 617;
	            this.path();
	        }

	        this.state = 620;
	        this.match(FSHParser.KW_INSERT);
	        this.state = 623;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 77:
	            this.state = 621;
	            this.match(FSHParser.RULESET_REFERENCE);
	            break;
	        case 76:
	            this.state = 622;
	            this.paramRuleSetRef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	codeInsertRule() {
	    let localctx = new CodeInsertRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, FSHParser.RULE_codeInsertRule);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 625;
	        this.match(FSHParser.STAR);
	        this.state = 629;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===62) {
	            this.state = 626;
	            this.match(FSHParser.CODE);
	            this.state = 631;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 632;
	        this.match(FSHParser.KW_INSERT);
	        this.state = 635;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 77:
	            this.state = 633;
	            this.match(FSHParser.RULESET_REFERENCE);
	            break;
	        case 76:
	            this.state = 634;
	            this.paramRuleSetRef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addCRElementRule() {
	    let localctx = new AddCRElementRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, FSHParser.RULE_addCRElementRule);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 637;
	        this.match(FSHParser.STAR);
	        this.state = 638;
	        this.path();
	        this.state = 639;
	        this.match(FSHParser.CARD);
	        this.state = 643;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2113929216) !== 0)) {
	            this.state = 640;
	            this.flag();
	            this.state = 645;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 646;
	        this.match(FSHParser.KW_CONTENTREFERENCE);
	        this.state = 647;
	        _la = this._input.LA(1);
	        if(!(_la===62 || _la===73)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 648;
	        this.match(FSHParser.STRING);
	        this.state = 650;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58 || _la===59) {
	            this.state = 649;
	            _la = this._input.LA(1);
	            if(!(_la===58 || _la===59)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	addElementRule() {
	    let localctx = new AddElementRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, FSHParser.RULE_addElementRule);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 652;
	        this.match(FSHParser.STAR);
	        this.state = 653;
	        this.path();
	        this.state = 654;
	        this.match(FSHParser.CARD);
	        this.state = 658;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,61,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 655;
	                this.flag(); 
	            }
	            this.state = 660;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,61,this._ctx);
	        }

	        this.state = 661;
	        this.targetType();
	        this.state = 666;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===40) {
	            this.state = 662;
	            this.match(FSHParser.KW_OR);
	            this.state = 663;
	            this.targetType();
	            this.state = 668;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 669;
	        this.match(FSHParser.STRING);
	        this.state = 671;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58 || _la===59) {
	            this.state = 670;
	            _la = this._input.LA(1);
	            if(!(_la===58 || _la===59)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pathRule() {
	    let localctx = new PathRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, FSHParser.RULE_pathRule);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 673;
	        this.match(FSHParser.STAR);
	        this.state = 674;
	        this.path();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vsComponent() {
	    let localctx = new VsComponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, FSHParser.RULE_vsComponent);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 676;
	        this.match(FSHParser.STAR);
	        this.state = 678;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===44 || _la===45) {
	            this.state = 677;
	            _la = this._input.LA(1);
	            if(!(_la===44 || _la===45)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 682;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	            this.state = 680;
	            this.vsConceptComponent();
	            break;
	        case 46:
	            this.state = 681;
	            this.vsFilterComponent();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vsConceptComponent() {
	    let localctx = new VsConceptComponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, FSHParser.RULE_vsConceptComponent);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 684;
	        this.code();
	        this.state = 686;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===31) {
	            this.state = 685;
	            this.vsComponentFrom();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vsFilterComponent() {
	    let localctx = new VsFilterComponentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, FSHParser.RULE_vsFilterComponent);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 688;
	        this.match(FSHParser.KW_CODES);
	        this.state = 689;
	        this.vsComponentFrom();
	        this.state = 692;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===47) {
	            this.state = 690;
	            this.match(FSHParser.KW_WHERE);
	            this.state = 691;
	            this.vsFilterList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vsComponentFrom() {
	    let localctx = new VsComponentFromContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, FSHParser.RULE_vsComponentFrom);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 694;
	        this.match(FSHParser.KW_FROM);
	        this.state = 705;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 49:
	            this.state = 695;
	            this.vsFromSystem();
	            this.state = 698;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38) {
	                this.state = 696;
	                this.match(FSHParser.KW_AND);
	                this.state = 697;
	                this.vsFromValueset();
	            }

	            break;
	        case 48:
	            this.state = 700;
	            this.vsFromValueset();
	            this.state = 703;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===38) {
	                this.state = 701;
	                this.match(FSHParser.KW_AND);
	                this.state = 702;
	                this.vsFromSystem();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vsFromSystem() {
	    let localctx = new VsFromSystemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, FSHParser.RULE_vsFromSystem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 707;
	        this.match(FSHParser.KW_SYSTEM);
	        this.state = 708;
	        this.vsFromTarget();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vsFromValueset() {
	    let localctx = new VsFromValuesetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, FSHParser.RULE_vsFromValueset);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 710;
	        this.match(FSHParser.KW_VSREFERENCE);
	        this.state = 711;
	        this.vsFromTarget();
	        this.state = 716;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,71,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 712;
	                this.match(FSHParser.KW_AND);
	                this.state = 713;
	                this.vsFromTarget(); 
	            }
	            this.state = 718;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,71,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vsFromTarget() {
	    let localctx = new VsFromTargetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, FSHParser.RULE_vsFromTarget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 721;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 52:
	        case 60:
	        case 64:
	        case 65:
	        case 73:
	            this.state = 719;
	            this.name();
	            break;
	        case 62:
	            this.state = 720;
	            this.match(FSHParser.CODE);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vsFilterList() {
	    let localctx = new VsFilterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, FSHParser.RULE_vsFilterList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 723;
	        this.vsFilterDefinition();
	        this.state = 728;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===38) {
	            this.state = 724;
	            this.match(FSHParser.KW_AND);
	            this.state = 725;
	            this.vsFilterDefinition();
	            this.state = 730;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vsFilterDefinition() {
	    let localctx = new VsFilterDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, FSHParser.RULE_vsFilterDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 731;
	        this.name();
	        this.state = 732;
	        this.vsFilterOperator();
	        this.state = 734;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 42)) & ~0x1f) === 0 && ((1 << (_la - 42)) & 537985027) !== 0)) {
	            this.state = 733;
	            this.vsFilterValue();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vsFilterOperator() {
	    let localctx = new VsFilterOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, FSHParser.RULE_vsFilterOperator);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 736;
	        _la = this._input.LA(1);
	        if(!(_la===53 || _la===73)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vsFilterValue() {
	    let localctx = new VsFilterValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, FSHParser.RULE_vsFilterValue);
	    try {
	        this.state = 743;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 62:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 738;
	            this.code();
	            break;
	        case 42:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 739;
	            this.match(FSHParser.KW_TRUE);
	            break;
	        case 43:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 740;
	            this.match(FSHParser.KW_FALSE);
	            break;
	        case 71:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 741;
	            this.match(FSHParser.REGEX);
	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 742;
	            this.match(FSHParser.STRING);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	name() {
	    let localctx = new NameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, FSHParser.RULE_name);
	    try {
	        this.state = 750;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 73:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 745;
	            this.match(FSHParser.SEQUENCE);
	            break;
	        case 60:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 746;
	            this.match(FSHParser.NUMBER);
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 747;
	            this.match(FSHParser.DATETIME);
	            break;
	        case 65:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 748;
	            this.match(FSHParser.TIME);
	            break;
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 52:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 749;
	            this.mostAlphaKeywords();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	path() {
	    let localctx = new PathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, FSHParser.RULE_path);
	    try {
	        this.state = 757;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 73:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 752;
	            this.match(FSHParser.SEQUENCE);
	            break;
	        case 60:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 753;
	            this.match(FSHParser.NUMBER);
	            break;
	        case 64:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 754;
	            this.match(FSHParser.DATETIME);
	            break;
	        case 65:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 755;
	            this.match(FSHParser.TIME);
	            break;
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 52:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 756;
	            this.mostAlphaKeywords();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caretPath() {
	    let localctx = new CaretPathContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, FSHParser.RULE_caretPath);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 759;
	        this.match(FSHParser.CARET_SEQUENCE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flag() {
	    let localctx = new FlagContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, FSHParser.RULE_flag);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 761;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 2113929216) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	strength() {
	    let localctx = new StrengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, FSHParser.RULE_strength);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 763;
	        _la = this._input.LA(1);
	        if(!(((((_la - 32)) & ~0x1f) === 0 && ((1 << (_la - 32)) & 15) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	value() {
	    let localctx = new ValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, FSHParser.RULE_value);
	    try {
	        this.state = 777;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 765;
	            this.match(FSHParser.STRING);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 766;
	            this.match(FSHParser.MULTILINE_STRING);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 767;
	            this.match(FSHParser.NUMBER);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 768;
	            this.match(FSHParser.DATETIME);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 769;
	            this.match(FSHParser.TIME);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 770;
	            this.reference();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 771;
	            this.canonical();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 772;
	            this.code();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 773;
	            this.quantity();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 774;
	            this.ratio();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 775;
	            this.bool();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 776;
	            this.name();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	item() {
	    let localctx = new ItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, FSHParser.RULE_item);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 779;
	        this.name();
	        this.state = 782;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===37) {
	            this.state = 780;
	            this.match(FSHParser.KW_NAMED);
	            this.state = 781;
	            this.name();
	        }

	        this.state = 784;
	        this.match(FSHParser.CARD);
	        this.state = 788;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) === 0 && ((1 << _la) & 2113929216) !== 0)) {
	            this.state = 785;
	            this.flag();
	            this.state = 790;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	code() {
	    let localctx = new CodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, FSHParser.RULE_code);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 791;
	        this.match(FSHParser.CODE);
	        this.state = 793;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 792;
	            this.match(FSHParser.STRING);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	concept() {
	    let localctx = new ConceptContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, FSHParser.RULE_concept);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 795;
	        this.match(FSHParser.STAR);
	        this.state = 797; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 796;
	            this.match(FSHParser.CODE);
	            this.state = 799; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===62);
	        this.state = 802;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,83,this._ctx);
	        if(la_===1) {
	            this.state = 801;
	            this.match(FSHParser.STRING);

	        }
	        this.state = 805;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58 || _la===59) {
	            this.state = 804;
	            _la = this._input.LA(1);
	            if(!(_la===58 || _la===59)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	quantity() {
	    let localctx = new QuantityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, FSHParser.RULE_quantity);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 808;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===60) {
	            this.state = 807;
	            this.match(FSHParser.NUMBER);
	        }

	        this.state = 810;
	        _la = this._input.LA(1);
	        if(!(_la===61 || _la===62)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 812;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 811;
	            this.match(FSHParser.STRING);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ratio() {
	    let localctx = new RatioContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, FSHParser.RULE_ratio);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 814;
	        this.ratioPart();
	        this.state = 815;
	        this.match(FSHParser.COLON);
	        this.state = 816;
	        this.ratioPart();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	reference() {
	    let localctx = new ReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, FSHParser.RULE_reference);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 818;
	        this.match(FSHParser.REFERENCE);
	        this.state = 820;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58) {
	            this.state = 819;
	            this.match(FSHParser.STRING);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	referenceType() {
	    let localctx = new ReferenceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, FSHParser.RULE_referenceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 822;
	        this.match(FSHParser.REFERENCE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	codeableReferenceType() {
	    let localctx = new CodeableReferenceTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, FSHParser.RULE_codeableReferenceType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 824;
	        this.match(FSHParser.CODEABLE_REFERENCE);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	canonical() {
	    let localctx = new CanonicalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, FSHParser.RULE_canonical);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 826;
	        this.match(FSHParser.CANONICAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ratioPart() {
	    let localctx = new RatioPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, FSHParser.RULE_ratioPart);
	    try {
	        this.state = 830;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 828;
	            this.match(FSHParser.NUMBER);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 829;
	            this.quantity();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	bool() {
	    let localctx = new BoolContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, FSHParser.RULE_bool);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 832;
	        _la = this._input.LA(1);
	        if(!(_la===42 || _la===43)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	targetType() {
	    let localctx = new TargetTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, FSHParser.RULE_targetType);
	    try {
	        this.state = 838;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 26:
	        case 27:
	        case 28:
	        case 29:
	        case 30:
	        case 31:
	        case 36:
	        case 37:
	        case 38:
	        case 39:
	        case 40:
	        case 41:
	        case 42:
	        case 43:
	        case 44:
	        case 45:
	        case 46:
	        case 47:
	        case 48:
	        case 49:
	        case 52:
	        case 60:
	        case 64:
	        case 65:
	        case 73:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 834;
	            this.name();
	            break;
	        case 67:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 835;
	            this.referenceType();
	            break;
	        case 69:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 836;
	            this.canonical();
	            break;
	        case 68:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 837;
	            this.codeableReferenceType();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	mostAlphaKeywords() {
	    let localctx = new MostAlphaKeywordsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, FSHParser.RULE_mostAlphaKeywords);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 840;
	        _la = this._input.LA(1);
	        if(!(((((_la - 26)) & ~0x1f) === 0 && ((1 << (_la - 26)) & 83885119) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

FSHParser.EOF = antlr4.Token.EOF;
FSHParser.KW_ALIAS = 1;
FSHParser.KW_PROFILE = 2;
FSHParser.KW_EXTENSION = 3;
FSHParser.KW_INSTANCE = 4;
FSHParser.KW_INSTANCEOF = 5;
FSHParser.KW_INVARIANT = 6;
FSHParser.KW_VALUESET = 7;
FSHParser.KW_CODESYSTEM = 8;
FSHParser.KW_RULESET = 9;
FSHParser.KW_MAPPING = 10;
FSHParser.KW_LOGICAL = 11;
FSHParser.KW_RESOURCE = 12;
FSHParser.KW_PARENT = 13;
FSHParser.KW_ID = 14;
FSHParser.KW_TITLE = 15;
FSHParser.KW_DESCRIPTION = 16;
FSHParser.KW_EXPRESSION = 17;
FSHParser.KW_XPATH = 18;
FSHParser.KW_SEVERITY = 19;
FSHParser.KW_USAGE = 20;
FSHParser.KW_SOURCE = 21;
FSHParser.KW_TARGET = 22;
FSHParser.KW_CONTEXT = 23;
FSHParser.KW_CHARACTERISTICS = 24;
FSHParser.KW_MOD = 25;
FSHParser.KW_MS = 26;
FSHParser.KW_SU = 27;
FSHParser.KW_TU = 28;
FSHParser.KW_NORMATIVE = 29;
FSHParser.KW_DRAFT = 30;
FSHParser.KW_FROM = 31;
FSHParser.KW_EXAMPLE = 32;
FSHParser.KW_PREFERRED = 33;
FSHParser.KW_EXTENSIBLE = 34;
FSHParser.KW_REQUIRED = 35;
FSHParser.KW_CONTAINS = 36;
FSHParser.KW_NAMED = 37;
FSHParser.KW_AND = 38;
FSHParser.KW_ONLY = 39;
FSHParser.KW_OR = 40;
FSHParser.KW_OBEYS = 41;
FSHParser.KW_TRUE = 42;
FSHParser.KW_FALSE = 43;
FSHParser.KW_INCLUDE = 44;
FSHParser.KW_EXCLUDE = 45;
FSHParser.KW_CODES = 46;
FSHParser.KW_WHERE = 47;
FSHParser.KW_VSREFERENCE = 48;
FSHParser.KW_SYSTEM = 49;
FSHParser.KW_EXACTLY = 50;
FSHParser.KW_INSERT = 51;
FSHParser.KW_CONTENTREFERENCE = 52;
FSHParser.EQUAL = 53;
FSHParser.STAR = 54;
FSHParser.COLON = 55;
FSHParser.COMMA = 56;
FSHParser.ARROW = 57;
FSHParser.STRING = 58;
FSHParser.MULTILINE_STRING = 59;
FSHParser.NUMBER = 60;
FSHParser.UNIT = 61;
FSHParser.CODE = 62;
FSHParser.CONCEPT_STRING = 63;
FSHParser.DATETIME = 64;
FSHParser.TIME = 65;
FSHParser.CARD = 66;
FSHParser.REFERENCE = 67;
FSHParser.CODEABLE_REFERENCE = 68;
FSHParser.CANONICAL = 69;
FSHParser.CARET_SEQUENCE = 70;
FSHParser.REGEX = 71;
FSHParser.BLOCK_COMMENT = 72;
FSHParser.SEQUENCE = 73;
FSHParser.WHITESPACE = 74;
FSHParser.LINE_COMMENT = 75;
FSHParser.PARAM_RULESET_REFERENCE = 76;
FSHParser.RULESET_REFERENCE = 77;
FSHParser.BRACKETED_PARAM = 78;
FSHParser.LAST_BRACKETED_PARAM = 79;
FSHParser.PLAIN_PARAM = 80;
FSHParser.LAST_PLAIN_PARAM = 81;
FSHParser.QUOTED_CONTEXT = 82;
FSHParser.LAST_QUOTED_CONTEXT = 83;
FSHParser.UNQUOTED_CONTEXT = 84;
FSHParser.LAST_UNQUOTED_CONTEXT = 85;
FSHParser.CONTEXT_WHITESPACE = 86;
FSHParser.CODE_ITEM = 87;
FSHParser.LAST_CODE_ITEM = 88;
FSHParser.CODE_LIST_WHITESPACE = 89;

FSHParser.RULE_doc = 0;
FSHParser.RULE_entity = 1;
FSHParser.RULE_alias = 2;
FSHParser.RULE_profile = 3;
FSHParser.RULE_extension = 4;
FSHParser.RULE_logical = 5;
FSHParser.RULE_resource = 6;
FSHParser.RULE_sdMetadata = 7;
FSHParser.RULE_sdRule = 8;
FSHParser.RULE_lrRule = 9;
FSHParser.RULE_instance = 10;
FSHParser.RULE_instanceMetadata = 11;
FSHParser.RULE_instanceRule = 12;
FSHParser.RULE_invariant = 13;
FSHParser.RULE_invariantMetadata = 14;
FSHParser.RULE_invariantRule = 15;
FSHParser.RULE_valueSet = 16;
FSHParser.RULE_vsMetadata = 17;
FSHParser.RULE_vsRule = 18;
FSHParser.RULE_codeSystem = 19;
FSHParser.RULE_csMetadata = 20;
FSHParser.RULE_csRule = 21;
FSHParser.RULE_ruleSet = 22;
FSHParser.RULE_ruleSetRule = 23;
FSHParser.RULE_paramRuleSet = 24;
FSHParser.RULE_paramRuleSetRef = 25;
FSHParser.RULE_parameter = 26;
FSHParser.RULE_lastParameter = 27;
FSHParser.RULE_paramRuleSetContent = 28;
FSHParser.RULE_mapping = 29;
FSHParser.RULE_mappingMetadata = 30;
FSHParser.RULE_mappingEntityRule = 31;
FSHParser.RULE_parent = 32;
FSHParser.RULE_id = 33;
FSHParser.RULE_title = 34;
FSHParser.RULE_description = 35;
FSHParser.RULE_expression = 36;
FSHParser.RULE_xpath = 37;
FSHParser.RULE_severity = 38;
FSHParser.RULE_instanceOf = 39;
FSHParser.RULE_usage = 40;
FSHParser.RULE_source = 41;
FSHParser.RULE_target = 42;
FSHParser.RULE_context = 43;
FSHParser.RULE_contextItem = 44;
FSHParser.RULE_lastContextItem = 45;
FSHParser.RULE_characteristics = 46;
FSHParser.RULE_cardRule = 47;
FSHParser.RULE_flagRule = 48;
FSHParser.RULE_valueSetRule = 49;
FSHParser.RULE_fixedValueRule = 50;
FSHParser.RULE_containsRule = 51;
FSHParser.RULE_onlyRule = 52;
FSHParser.RULE_obeysRule = 53;
FSHParser.RULE_caretValueRule = 54;
FSHParser.RULE_codeCaretValueRule = 55;
FSHParser.RULE_mappingRule = 56;
FSHParser.RULE_insertRule = 57;
FSHParser.RULE_codeInsertRule = 58;
FSHParser.RULE_addCRElementRule = 59;
FSHParser.RULE_addElementRule = 60;
FSHParser.RULE_pathRule = 61;
FSHParser.RULE_vsComponent = 62;
FSHParser.RULE_vsConceptComponent = 63;
FSHParser.RULE_vsFilterComponent = 64;
FSHParser.RULE_vsComponentFrom = 65;
FSHParser.RULE_vsFromSystem = 66;
FSHParser.RULE_vsFromValueset = 67;
FSHParser.RULE_vsFromTarget = 68;
FSHParser.RULE_vsFilterList = 69;
FSHParser.RULE_vsFilterDefinition = 70;
FSHParser.RULE_vsFilterOperator = 71;
FSHParser.RULE_vsFilterValue = 72;
FSHParser.RULE_name = 73;
FSHParser.RULE_path = 74;
FSHParser.RULE_caretPath = 75;
FSHParser.RULE_flag = 76;
FSHParser.RULE_strength = 77;
FSHParser.RULE_value = 78;
FSHParser.RULE_item = 79;
FSHParser.RULE_code = 80;
FSHParser.RULE_concept = 81;
FSHParser.RULE_quantity = 82;
FSHParser.RULE_ratio = 83;
FSHParser.RULE_reference = 84;
FSHParser.RULE_referenceType = 85;
FSHParser.RULE_codeableReferenceType = 86;
FSHParser.RULE_canonical = 87;
FSHParser.RULE_ratioPart = 88;
FSHParser.RULE_bool = 89;
FSHParser.RULE_targetType = 90;
FSHParser.RULE_mostAlphaKeywords = 91;

class DocContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_doc;
    }

	EOF() {
	    return this.getToken(FSHParser.EOF, 0);
	};

	entity = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EntityContext);
	    } else {
	        return this.getTypedRuleContext(EntityContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterDoc(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitDoc(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitDoc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EntityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_entity;
    }

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	profile() {
	    return this.getTypedRuleContext(ProfileContext,0);
	};

	extension() {
	    return this.getTypedRuleContext(ExtensionContext,0);
	};

	invariant() {
	    return this.getTypedRuleContext(InvariantContext,0);
	};

	instance() {
	    return this.getTypedRuleContext(InstanceContext,0);
	};

	valueSet() {
	    return this.getTypedRuleContext(ValueSetContext,0);
	};

	codeSystem() {
	    return this.getTypedRuleContext(CodeSystemContext,0);
	};

	ruleSet() {
	    return this.getTypedRuleContext(RuleSetContext,0);
	};

	paramRuleSet() {
	    return this.getTypedRuleContext(ParamRuleSetContext,0);
	};

	mapping() {
	    return this.getTypedRuleContext(MappingContext,0);
	};

	logical() {
	    return this.getTypedRuleContext(LogicalContext,0);
	};

	resource() {
	    return this.getTypedRuleContext(ResourceContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterEntity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitEntity(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitEntity(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_alias;
    }

	KW_ALIAS() {
	    return this.getToken(FSHParser.KW_ALIAS, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	EQUAL() {
	    return this.getToken(FSHParser.EQUAL, 0);
	};

	SEQUENCE() {
	    return this.getToken(FSHParser.SEQUENCE, 0);
	};

	CODE() {
	    return this.getToken(FSHParser.CODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProfileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_profile;
    }

	KW_PROFILE() {
	    return this.getToken(FSHParser.KW_PROFILE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	sdMetadata = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SdMetadataContext);
	    } else {
	        return this.getTypedRuleContext(SdMetadataContext,i);
	    }
	};

	sdRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SdRuleContext);
	    } else {
	        return this.getTypedRuleContext(SdRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterProfile(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitProfile(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitProfile(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExtensionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_extension;
    }

	KW_EXTENSION() {
	    return this.getToken(FSHParser.KW_EXTENSION, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	sdMetadata = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SdMetadataContext);
	    } else {
	        return this.getTypedRuleContext(SdMetadataContext,i);
	    }
	};

	context = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ContextContext);
	    } else {
	        return this.getTypedRuleContext(ContextContext,i);
	    }
	};

	sdRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SdRuleContext);
	    } else {
	        return this.getTypedRuleContext(SdRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterExtension(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitExtension(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitExtension(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogicalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_logical;
    }

	KW_LOGICAL() {
	    return this.getToken(FSHParser.KW_LOGICAL, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	sdMetadata = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SdMetadataContext);
	    } else {
	        return this.getTypedRuleContext(SdMetadataContext,i);
	    }
	};

	characteristics = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CharacteristicsContext);
	    } else {
	        return this.getTypedRuleContext(CharacteristicsContext,i);
	    }
	};

	lrRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LrRuleContext);
	    } else {
	        return this.getTypedRuleContext(LrRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterLogical(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitLogical(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitLogical(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_resource;
    }

	KW_RESOURCE() {
	    return this.getToken(FSHParser.KW_RESOURCE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	sdMetadata = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SdMetadataContext);
	    } else {
	        return this.getTypedRuleContext(SdMetadataContext,i);
	    }
	};

	lrRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LrRuleContext);
	    } else {
	        return this.getTypedRuleContext(LrRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterResource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitResource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitResource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SdMetadataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_sdMetadata;
    }

	parent() {
	    return this.getTypedRuleContext(ParentContext,0);
	};

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	title() {
	    return this.getTypedRuleContext(TitleContext,0);
	};

	description() {
	    return this.getTypedRuleContext(DescriptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterSdMetadata(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitSdMetadata(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitSdMetadata(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SdRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_sdRule;
    }

	cardRule() {
	    return this.getTypedRuleContext(CardRuleContext,0);
	};

	flagRule() {
	    return this.getTypedRuleContext(FlagRuleContext,0);
	};

	valueSetRule() {
	    return this.getTypedRuleContext(ValueSetRuleContext,0);
	};

	fixedValueRule() {
	    return this.getTypedRuleContext(FixedValueRuleContext,0);
	};

	containsRule() {
	    return this.getTypedRuleContext(ContainsRuleContext,0);
	};

	onlyRule() {
	    return this.getTypedRuleContext(OnlyRuleContext,0);
	};

	obeysRule() {
	    return this.getTypedRuleContext(ObeysRuleContext,0);
	};

	caretValueRule() {
	    return this.getTypedRuleContext(CaretValueRuleContext,0);
	};

	insertRule() {
	    return this.getTypedRuleContext(InsertRuleContext,0);
	};

	pathRule() {
	    return this.getTypedRuleContext(PathRuleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterSdRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitSdRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitSdRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LrRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_lrRule;
    }

	sdRule() {
	    return this.getTypedRuleContext(SdRuleContext,0);
	};

	addElementRule() {
	    return this.getTypedRuleContext(AddElementRuleContext,0);
	};

	addCRElementRule() {
	    return this.getTypedRuleContext(AddCRElementRuleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterLrRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitLrRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitLrRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InstanceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_instance;
    }

	KW_INSTANCE() {
	    return this.getToken(FSHParser.KW_INSTANCE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	instanceMetadata = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InstanceMetadataContext);
	    } else {
	        return this.getTypedRuleContext(InstanceMetadataContext,i);
	    }
	};

	instanceRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InstanceRuleContext);
	    } else {
	        return this.getTypedRuleContext(InstanceRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterInstance(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitInstance(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitInstance(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InstanceMetadataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_instanceMetadata;
    }

	instanceOf() {
	    return this.getTypedRuleContext(InstanceOfContext,0);
	};

	title() {
	    return this.getTypedRuleContext(TitleContext,0);
	};

	description() {
	    return this.getTypedRuleContext(DescriptionContext,0);
	};

	usage() {
	    return this.getTypedRuleContext(UsageContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterInstanceMetadata(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitInstanceMetadata(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitInstanceMetadata(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InstanceRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_instanceRule;
    }

	fixedValueRule() {
	    return this.getTypedRuleContext(FixedValueRuleContext,0);
	};

	insertRule() {
	    return this.getTypedRuleContext(InsertRuleContext,0);
	};

	pathRule() {
	    return this.getTypedRuleContext(PathRuleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterInstanceRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitInstanceRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitInstanceRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InvariantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_invariant;
    }

	KW_INVARIANT() {
	    return this.getToken(FSHParser.KW_INVARIANT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	invariantMetadata = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InvariantMetadataContext);
	    } else {
	        return this.getTypedRuleContext(InvariantMetadataContext,i);
	    }
	};

	invariantRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InvariantRuleContext);
	    } else {
	        return this.getTypedRuleContext(InvariantRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterInvariant(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitInvariant(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitInvariant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InvariantMetadataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_invariantMetadata;
    }

	description() {
	    return this.getTypedRuleContext(DescriptionContext,0);
	};

	expression() {
	    return this.getTypedRuleContext(ExpressionContext,0);
	};

	xpath() {
	    return this.getTypedRuleContext(XpathContext,0);
	};

	severity() {
	    return this.getTypedRuleContext(SeverityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterInvariantMetadata(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitInvariantMetadata(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitInvariantMetadata(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InvariantRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_invariantRule;
    }

	fixedValueRule() {
	    return this.getTypedRuleContext(FixedValueRuleContext,0);
	};

	insertRule() {
	    return this.getTypedRuleContext(InsertRuleContext,0);
	};

	pathRule() {
	    return this.getTypedRuleContext(PathRuleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterInvariantRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitInvariantRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitInvariantRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_valueSet;
    }

	KW_VALUESET() {
	    return this.getToken(FSHParser.KW_VALUESET, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	vsMetadata = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VsMetadataContext);
	    } else {
	        return this.getTypedRuleContext(VsMetadataContext,i);
	    }
	};

	vsRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VsRuleContext);
	    } else {
	        return this.getTypedRuleContext(VsRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterValueSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitValueSet(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitValueSet(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VsMetadataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_vsMetadata;
    }

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	title() {
	    return this.getTypedRuleContext(TitleContext,0);
	};

	description() {
	    return this.getTypedRuleContext(DescriptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterVsMetadata(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitVsMetadata(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitVsMetadata(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VsRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_vsRule;
    }

	vsComponent() {
	    return this.getTypedRuleContext(VsComponentContext,0);
	};

	caretValueRule() {
	    return this.getTypedRuleContext(CaretValueRuleContext,0);
	};

	codeCaretValueRule() {
	    return this.getTypedRuleContext(CodeCaretValueRuleContext,0);
	};

	insertRule() {
	    return this.getTypedRuleContext(InsertRuleContext,0);
	};

	codeInsertRule() {
	    return this.getTypedRuleContext(CodeInsertRuleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterVsRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitVsRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitVsRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CodeSystemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_codeSystem;
    }

	KW_CODESYSTEM() {
	    return this.getToken(FSHParser.KW_CODESYSTEM, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	csMetadata = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CsMetadataContext);
	    } else {
	        return this.getTypedRuleContext(CsMetadataContext,i);
	    }
	};

	csRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CsRuleContext);
	    } else {
	        return this.getTypedRuleContext(CsRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterCodeSystem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitCodeSystem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitCodeSystem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CsMetadataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_csMetadata;
    }

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	title() {
	    return this.getTypedRuleContext(TitleContext,0);
	};

	description() {
	    return this.getTypedRuleContext(DescriptionContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterCsMetadata(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitCsMetadata(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitCsMetadata(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CsRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_csRule;
    }

	concept() {
	    return this.getTypedRuleContext(ConceptContext,0);
	};

	codeCaretValueRule() {
	    return this.getTypedRuleContext(CodeCaretValueRuleContext,0);
	};

	codeInsertRule() {
	    return this.getTypedRuleContext(CodeInsertRuleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterCsRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitCsRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitCsRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RuleSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_ruleSet;
    }

	KW_RULESET() {
	    return this.getToken(FSHParser.KW_RULESET, 0);
	};

	RULESET_REFERENCE() {
	    return this.getToken(FSHParser.RULESET_REFERENCE, 0);
	};

	ruleSetRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RuleSetRuleContext);
	    } else {
	        return this.getTypedRuleContext(RuleSetRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterRuleSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitRuleSet(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitRuleSet(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RuleSetRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_ruleSetRule;
    }

	sdRule() {
	    return this.getTypedRuleContext(SdRuleContext,0);
	};

	addElementRule() {
	    return this.getTypedRuleContext(AddElementRuleContext,0);
	};

	addCRElementRule() {
	    return this.getTypedRuleContext(AddCRElementRuleContext,0);
	};

	concept() {
	    return this.getTypedRuleContext(ConceptContext,0);
	};

	codeCaretValueRule() {
	    return this.getTypedRuleContext(CodeCaretValueRuleContext,0);
	};

	codeInsertRule() {
	    return this.getTypedRuleContext(CodeInsertRuleContext,0);
	};

	vsComponent() {
	    return this.getTypedRuleContext(VsComponentContext,0);
	};

	mappingRule() {
	    return this.getTypedRuleContext(MappingRuleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterRuleSetRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitRuleSetRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitRuleSetRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParamRuleSetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_paramRuleSet;
    }

	KW_RULESET() {
	    return this.getToken(FSHParser.KW_RULESET, 0);
	};

	paramRuleSetRef() {
	    return this.getTypedRuleContext(ParamRuleSetRefContext,0);
	};

	paramRuleSetContent() {
	    return this.getTypedRuleContext(ParamRuleSetContentContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterParamRuleSet(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitParamRuleSet(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitParamRuleSet(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParamRuleSetRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_paramRuleSetRef;
    }

	PARAM_RULESET_REFERENCE() {
	    return this.getToken(FSHParser.PARAM_RULESET_REFERENCE, 0);
	};

	lastParameter() {
	    return this.getTypedRuleContext(LastParameterContext,0);
	};

	parameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ParameterContext);
	    } else {
	        return this.getTypedRuleContext(ParameterContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterParamRuleSetRef(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitParamRuleSetRef(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitParamRuleSetRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_parameter;
    }

	BRACKETED_PARAM() {
	    return this.getToken(FSHParser.BRACKETED_PARAM, 0);
	};

	PLAIN_PARAM() {
	    return this.getToken(FSHParser.PLAIN_PARAM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LastParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_lastParameter;
    }

	LAST_BRACKETED_PARAM() {
	    return this.getToken(FSHParser.LAST_BRACKETED_PARAM, 0);
	};

	LAST_PLAIN_PARAM() {
	    return this.getToken(FSHParser.LAST_PLAIN_PARAM, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterLastParameter(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitLastParameter(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitLastParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParamRuleSetContentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_paramRuleSetContent;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	KW_PROFILE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_PROFILE);
	    } else {
	        return this.getToken(FSHParser.KW_PROFILE, i);
	    }
	};


	KW_ALIAS = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_ALIAS);
	    } else {
	        return this.getToken(FSHParser.KW_ALIAS, i);
	    }
	};


	KW_EXTENSION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_EXTENSION);
	    } else {
	        return this.getToken(FSHParser.KW_EXTENSION, i);
	    }
	};


	KW_INSTANCE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_INSTANCE);
	    } else {
	        return this.getToken(FSHParser.KW_INSTANCE, i);
	    }
	};


	KW_INVARIANT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_INVARIANT);
	    } else {
	        return this.getToken(FSHParser.KW_INVARIANT, i);
	    }
	};


	KW_VALUESET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_VALUESET);
	    } else {
	        return this.getToken(FSHParser.KW_VALUESET, i);
	    }
	};


	KW_CODESYSTEM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_CODESYSTEM);
	    } else {
	        return this.getToken(FSHParser.KW_CODESYSTEM, i);
	    }
	};


	KW_RULESET = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_RULESET);
	    } else {
	        return this.getToken(FSHParser.KW_RULESET, i);
	    }
	};


	KW_MAPPING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_MAPPING);
	    } else {
	        return this.getToken(FSHParser.KW_MAPPING, i);
	    }
	};


	KW_LOGICAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_LOGICAL);
	    } else {
	        return this.getToken(FSHParser.KW_LOGICAL, i);
	    }
	};


	KW_RESOURCE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_RESOURCE);
	    } else {
	        return this.getToken(FSHParser.KW_RESOURCE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterParamRuleSetContent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitParamRuleSetContent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitParamRuleSetContent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MappingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_mapping;
    }

	KW_MAPPING() {
	    return this.getToken(FSHParser.KW_MAPPING, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	mappingMetadata = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MappingMetadataContext);
	    } else {
	        return this.getTypedRuleContext(MappingMetadataContext,i);
	    }
	};

	mappingEntityRule = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MappingEntityRuleContext);
	    } else {
	        return this.getTypedRuleContext(MappingEntityRuleContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterMapping(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitMapping(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitMapping(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MappingMetadataContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_mappingMetadata;
    }

	id() {
	    return this.getTypedRuleContext(IdContext,0);
	};

	source() {
	    return this.getTypedRuleContext(SourceContext,0);
	};

	target() {
	    return this.getTypedRuleContext(TargetContext,0);
	};

	description() {
	    return this.getTypedRuleContext(DescriptionContext,0);
	};

	title() {
	    return this.getTypedRuleContext(TitleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterMappingMetadata(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitMappingMetadata(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitMappingMetadata(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MappingEntityRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_mappingEntityRule;
    }

	mappingRule() {
	    return this.getTypedRuleContext(MappingRuleContext,0);
	};

	insertRule() {
	    return this.getTypedRuleContext(InsertRuleContext,0);
	};

	pathRule() {
	    return this.getTypedRuleContext(PathRuleContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterMappingEntityRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitMappingEntityRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitMappingEntityRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_parent;
    }

	KW_PARENT() {
	    return this.getToken(FSHParser.KW_PARENT, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterParent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitParent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitParent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_id;
    }

	KW_ID() {
	    return this.getToken(FSHParser.KW_ID, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterId(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitId(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitId(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TitleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_title;
    }

	KW_TITLE() {
	    return this.getToken(FSHParser.KW_TITLE, 0);
	};

	STRING() {
	    return this.getToken(FSHParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterTitle(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitTitle(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitTitle(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescriptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_description;
    }

	KW_DESCRIPTION() {
	    return this.getToken(FSHParser.KW_DESCRIPTION, 0);
	};

	STRING() {
	    return this.getToken(FSHParser.STRING, 0);
	};

	MULTILINE_STRING() {
	    return this.getToken(FSHParser.MULTILINE_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterDescription(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitDescription(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitDescription(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_expression;
    }

	KW_EXPRESSION() {
	    return this.getToken(FSHParser.KW_EXPRESSION, 0);
	};

	STRING() {
	    return this.getToken(FSHParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterExpression(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitExpression(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class XpathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_xpath;
    }

	KW_XPATH() {
	    return this.getToken(FSHParser.KW_XPATH, 0);
	};

	STRING() {
	    return this.getToken(FSHParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterXpath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitXpath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitXpath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SeverityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_severity;
    }

	KW_SEVERITY() {
	    return this.getToken(FSHParser.KW_SEVERITY, 0);
	};

	CODE() {
	    return this.getToken(FSHParser.CODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterSeverity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitSeverity(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitSeverity(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InstanceOfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_instanceOf;
    }

	KW_INSTANCEOF() {
	    return this.getToken(FSHParser.KW_INSTANCEOF, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterInstanceOf(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitInstanceOf(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitInstanceOf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UsageContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_usage;
    }

	KW_USAGE() {
	    return this.getToken(FSHParser.KW_USAGE, 0);
	};

	CODE() {
	    return this.getToken(FSHParser.CODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterUsage(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitUsage(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitUsage(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_source;
    }

	KW_SOURCE() {
	    return this.getToken(FSHParser.KW_SOURCE, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterSource(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitSource(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitSource(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TargetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_target;
    }

	KW_TARGET() {
	    return this.getToken(FSHParser.KW_TARGET, 0);
	};

	STRING() {
	    return this.getToken(FSHParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterTarget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitTarget(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitTarget(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_context;
    }

	KW_CONTEXT() {
	    return this.getToken(FSHParser.KW_CONTEXT, 0);
	};

	lastContextItem() {
	    return this.getTypedRuleContext(LastContextItemContext,0);
	};

	contextItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ContextItemContext);
	    } else {
	        return this.getTypedRuleContext(ContextItemContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterContext(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitContext(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitContext(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContextItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_contextItem;
    }

	QUOTED_CONTEXT() {
	    return this.getToken(FSHParser.QUOTED_CONTEXT, 0);
	};

	UNQUOTED_CONTEXT() {
	    return this.getToken(FSHParser.UNQUOTED_CONTEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterContextItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitContextItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitContextItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LastContextItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_lastContextItem;
    }

	LAST_QUOTED_CONTEXT() {
	    return this.getToken(FSHParser.LAST_QUOTED_CONTEXT, 0);
	};

	LAST_UNQUOTED_CONTEXT() {
	    return this.getToken(FSHParser.LAST_UNQUOTED_CONTEXT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterLastContextItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitLastContextItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitLastContextItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharacteristicsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_characteristics;
    }

	KW_CHARACTERISTICS() {
	    return this.getToken(FSHParser.KW_CHARACTERISTICS, 0);
	};

	LAST_CODE_ITEM() {
	    return this.getToken(FSHParser.LAST_CODE_ITEM, 0);
	};

	CODE_ITEM = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.CODE_ITEM);
	    } else {
	        return this.getToken(FSHParser.CODE_ITEM, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterCharacteristics(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitCharacteristics(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitCharacteristics(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CardRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_cardRule;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	CARD() {
	    return this.getToken(FSHParser.CARD, 0);
	};

	flag = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FlagContext);
	    } else {
	        return this.getTypedRuleContext(FlagContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterCardRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitCardRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitCardRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FlagRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_flagRule;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	path = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PathContext);
	    } else {
	        return this.getTypedRuleContext(PathContext,i);
	    }
	};

	KW_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_AND);
	    } else {
	        return this.getToken(FSHParser.KW_AND, i);
	    }
	};


	flag = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FlagContext);
	    } else {
	        return this.getTypedRuleContext(FlagContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterFlagRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitFlagRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitFlagRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueSetRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_valueSetRule;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	KW_FROM() {
	    return this.getToken(FSHParser.KW_FROM, 0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	strength() {
	    return this.getTypedRuleContext(StrengthContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterValueSetRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitValueSetRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitValueSetRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FixedValueRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_fixedValueRule;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	EQUAL() {
	    return this.getToken(FSHParser.EQUAL, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	KW_EXACTLY() {
	    return this.getToken(FSHParser.KW_EXACTLY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterFixedValueRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitFixedValueRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitFixedValueRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ContainsRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_containsRule;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	KW_CONTAINS() {
	    return this.getToken(FSHParser.KW_CONTAINS, 0);
	};

	item = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ItemContext);
	    } else {
	        return this.getTypedRuleContext(ItemContext,i);
	    }
	};

	KW_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_AND);
	    } else {
	        return this.getToken(FSHParser.KW_AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterContainsRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitContainsRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitContainsRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OnlyRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_onlyRule;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	KW_ONLY() {
	    return this.getToken(FSHParser.KW_ONLY, 0);
	};

	targetType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TargetTypeContext);
	    } else {
	        return this.getTypedRuleContext(TargetTypeContext,i);
	    }
	};

	KW_OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_OR);
	    } else {
	        return this.getToken(FSHParser.KW_OR, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterOnlyRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitOnlyRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitOnlyRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ObeysRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_obeysRule;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	KW_OBEYS() {
	    return this.getToken(FSHParser.KW_OBEYS, 0);
	};

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	KW_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_AND);
	    } else {
	        return this.getToken(FSHParser.KW_AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterObeysRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitObeysRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitObeysRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaretValueRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_caretValueRule;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	caretPath() {
	    return this.getTypedRuleContext(CaretPathContext,0);
	};

	EQUAL() {
	    return this.getToken(FSHParser.EQUAL, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterCaretValueRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitCaretValueRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitCaretValueRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CodeCaretValueRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_codeCaretValueRule;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	caretPath() {
	    return this.getTypedRuleContext(CaretPathContext,0);
	};

	EQUAL() {
	    return this.getToken(FSHParser.EQUAL, 0);
	};

	value() {
	    return this.getTypedRuleContext(ValueContext,0);
	};

	CODE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.CODE);
	    } else {
	        return this.getToken(FSHParser.CODE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterCodeCaretValueRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitCodeCaretValueRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitCodeCaretValueRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MappingRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_mappingRule;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	ARROW() {
	    return this.getToken(FSHParser.ARROW, 0);
	};

	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.STRING);
	    } else {
	        return this.getToken(FSHParser.STRING, i);
	    }
	};


	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	CODE() {
	    return this.getToken(FSHParser.CODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterMappingRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitMappingRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitMappingRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_insertRule;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	KW_INSERT() {
	    return this.getToken(FSHParser.KW_INSERT, 0);
	};

	RULESET_REFERENCE() {
	    return this.getToken(FSHParser.RULESET_REFERENCE, 0);
	};

	paramRuleSetRef() {
	    return this.getTypedRuleContext(ParamRuleSetRefContext,0);
	};

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterInsertRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitInsertRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitInsertRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CodeInsertRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_codeInsertRule;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	KW_INSERT() {
	    return this.getToken(FSHParser.KW_INSERT, 0);
	};

	RULESET_REFERENCE() {
	    return this.getToken(FSHParser.RULESET_REFERENCE, 0);
	};

	paramRuleSetRef() {
	    return this.getTypedRuleContext(ParamRuleSetRefContext,0);
	};

	CODE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.CODE);
	    } else {
	        return this.getToken(FSHParser.CODE, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterCodeInsertRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitCodeInsertRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitCodeInsertRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AddCRElementRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_addCRElementRule;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	CARD() {
	    return this.getToken(FSHParser.CARD, 0);
	};

	KW_CONTENTREFERENCE() {
	    return this.getToken(FSHParser.KW_CONTENTREFERENCE, 0);
	};

	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.STRING);
	    } else {
	        return this.getToken(FSHParser.STRING, i);
	    }
	};


	SEQUENCE() {
	    return this.getToken(FSHParser.SEQUENCE, 0);
	};

	CODE() {
	    return this.getToken(FSHParser.CODE, 0);
	};

	flag = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FlagContext);
	    } else {
	        return this.getTypedRuleContext(FlagContext,i);
	    }
	};

	MULTILINE_STRING() {
	    return this.getToken(FSHParser.MULTILINE_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterAddCRElementRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitAddCRElementRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitAddCRElementRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AddElementRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_addElementRule;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	CARD() {
	    return this.getToken(FSHParser.CARD, 0);
	};

	targetType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TargetTypeContext);
	    } else {
	        return this.getTypedRuleContext(TargetTypeContext,i);
	    }
	};

	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.STRING);
	    } else {
	        return this.getToken(FSHParser.STRING, i);
	    }
	};


	flag = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FlagContext);
	    } else {
	        return this.getTypedRuleContext(FlagContext,i);
	    }
	};

	KW_OR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_OR);
	    } else {
	        return this.getToken(FSHParser.KW_OR, i);
	    }
	};


	MULTILINE_STRING() {
	    return this.getToken(FSHParser.MULTILINE_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterAddElementRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitAddElementRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitAddElementRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_pathRule;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	path() {
	    return this.getTypedRuleContext(PathContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterPathRule(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitPathRule(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitPathRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VsComponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_vsComponent;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	vsConceptComponent() {
	    return this.getTypedRuleContext(VsConceptComponentContext,0);
	};

	vsFilterComponent() {
	    return this.getTypedRuleContext(VsFilterComponentContext,0);
	};

	KW_INCLUDE() {
	    return this.getToken(FSHParser.KW_INCLUDE, 0);
	};

	KW_EXCLUDE() {
	    return this.getToken(FSHParser.KW_EXCLUDE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterVsComponent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitVsComponent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitVsComponent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VsConceptComponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_vsConceptComponent;
    }

	code() {
	    return this.getTypedRuleContext(CodeContext,0);
	};

	vsComponentFrom() {
	    return this.getTypedRuleContext(VsComponentFromContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterVsConceptComponent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitVsConceptComponent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitVsConceptComponent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VsFilterComponentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_vsFilterComponent;
    }

	KW_CODES() {
	    return this.getToken(FSHParser.KW_CODES, 0);
	};

	vsComponentFrom() {
	    return this.getTypedRuleContext(VsComponentFromContext,0);
	};

	KW_WHERE() {
	    return this.getToken(FSHParser.KW_WHERE, 0);
	};

	vsFilterList() {
	    return this.getTypedRuleContext(VsFilterListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterVsFilterComponent(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitVsFilterComponent(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitVsFilterComponent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VsComponentFromContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_vsComponentFrom;
    }

	KW_FROM() {
	    return this.getToken(FSHParser.KW_FROM, 0);
	};

	vsFromSystem() {
	    return this.getTypedRuleContext(VsFromSystemContext,0);
	};

	vsFromValueset() {
	    return this.getTypedRuleContext(VsFromValuesetContext,0);
	};

	KW_AND() {
	    return this.getToken(FSHParser.KW_AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterVsComponentFrom(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitVsComponentFrom(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitVsComponentFrom(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VsFromSystemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_vsFromSystem;
    }

	KW_SYSTEM() {
	    return this.getToken(FSHParser.KW_SYSTEM, 0);
	};

	vsFromTarget() {
	    return this.getTypedRuleContext(VsFromTargetContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterVsFromSystem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitVsFromSystem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitVsFromSystem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VsFromValuesetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_vsFromValueset;
    }

	KW_VSREFERENCE() {
	    return this.getToken(FSHParser.KW_VSREFERENCE, 0);
	};

	vsFromTarget = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VsFromTargetContext);
	    } else {
	        return this.getTypedRuleContext(VsFromTargetContext,i);
	    }
	};

	KW_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_AND);
	    } else {
	        return this.getToken(FSHParser.KW_AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterVsFromValueset(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitVsFromValueset(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitVsFromValueset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VsFromTargetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_vsFromTarget;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	CODE() {
	    return this.getToken(FSHParser.CODE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterVsFromTarget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitVsFromTarget(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitVsFromTarget(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VsFilterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_vsFilterList;
    }

	vsFilterDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VsFilterDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(VsFilterDefinitionContext,i);
	    }
	};

	KW_AND = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.KW_AND);
	    } else {
	        return this.getToken(FSHParser.KW_AND, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterVsFilterList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitVsFilterList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitVsFilterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VsFilterDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_vsFilterDefinition;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	vsFilterOperator() {
	    return this.getTypedRuleContext(VsFilterOperatorContext,0);
	};

	vsFilterValue() {
	    return this.getTypedRuleContext(VsFilterValueContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterVsFilterDefinition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitVsFilterDefinition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitVsFilterDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VsFilterOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_vsFilterOperator;
    }

	EQUAL() {
	    return this.getToken(FSHParser.EQUAL, 0);
	};

	SEQUENCE() {
	    return this.getToken(FSHParser.SEQUENCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterVsFilterOperator(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitVsFilterOperator(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitVsFilterOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VsFilterValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_vsFilterValue;
    }

	code() {
	    return this.getTypedRuleContext(CodeContext,0);
	};

	KW_TRUE() {
	    return this.getToken(FSHParser.KW_TRUE, 0);
	};

	KW_FALSE() {
	    return this.getToken(FSHParser.KW_FALSE, 0);
	};

	REGEX() {
	    return this.getToken(FSHParser.REGEX, 0);
	};

	STRING() {
	    return this.getToken(FSHParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterVsFilterValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitVsFilterValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitVsFilterValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_name;
    }

	SEQUENCE() {
	    return this.getToken(FSHParser.SEQUENCE, 0);
	};

	NUMBER() {
	    return this.getToken(FSHParser.NUMBER, 0);
	};

	DATETIME() {
	    return this.getToken(FSHParser.DATETIME, 0);
	};

	TIME() {
	    return this.getToken(FSHParser.TIME, 0);
	};

	mostAlphaKeywords() {
	    return this.getTypedRuleContext(MostAlphaKeywordsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterName(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitName(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_path;
    }

	SEQUENCE() {
	    return this.getToken(FSHParser.SEQUENCE, 0);
	};

	NUMBER() {
	    return this.getToken(FSHParser.NUMBER, 0);
	};

	DATETIME() {
	    return this.getToken(FSHParser.DATETIME, 0);
	};

	TIME() {
	    return this.getToken(FSHParser.TIME, 0);
	};

	mostAlphaKeywords() {
	    return this.getTypedRuleContext(MostAlphaKeywordsContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitPath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitPath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaretPathContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_caretPath;
    }

	CARET_SEQUENCE() {
	    return this.getToken(FSHParser.CARET_SEQUENCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterCaretPath(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitCaretPath(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitCaretPath(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FlagContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_flag;
    }

	KW_MOD() {
	    return this.getToken(FSHParser.KW_MOD, 0);
	};

	KW_MS() {
	    return this.getToken(FSHParser.KW_MS, 0);
	};

	KW_SU() {
	    return this.getToken(FSHParser.KW_SU, 0);
	};

	KW_TU() {
	    return this.getToken(FSHParser.KW_TU, 0);
	};

	KW_NORMATIVE() {
	    return this.getToken(FSHParser.KW_NORMATIVE, 0);
	};

	KW_DRAFT() {
	    return this.getToken(FSHParser.KW_DRAFT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterFlag(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitFlag(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitFlag(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StrengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_strength;
    }

	KW_EXAMPLE() {
	    return this.getToken(FSHParser.KW_EXAMPLE, 0);
	};

	KW_PREFERRED() {
	    return this.getToken(FSHParser.KW_PREFERRED, 0);
	};

	KW_EXTENSIBLE() {
	    return this.getToken(FSHParser.KW_EXTENSIBLE, 0);
	};

	KW_REQUIRED() {
	    return this.getToken(FSHParser.KW_REQUIRED, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterStrength(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitStrength(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitStrength(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_value;
    }

	STRING() {
	    return this.getToken(FSHParser.STRING, 0);
	};

	MULTILINE_STRING() {
	    return this.getToken(FSHParser.MULTILINE_STRING, 0);
	};

	NUMBER() {
	    return this.getToken(FSHParser.NUMBER, 0);
	};

	DATETIME() {
	    return this.getToken(FSHParser.DATETIME, 0);
	};

	TIME() {
	    return this.getToken(FSHParser.TIME, 0);
	};

	reference() {
	    return this.getTypedRuleContext(ReferenceContext,0);
	};

	canonical() {
	    return this.getTypedRuleContext(CanonicalContext,0);
	};

	code() {
	    return this.getTypedRuleContext(CodeContext,0);
	};

	quantity() {
	    return this.getTypedRuleContext(QuantityContext,0);
	};

	ratio() {
	    return this.getTypedRuleContext(RatioContext,0);
	};

	bool() {
	    return this.getTypedRuleContext(BoolContext,0);
	};

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_item;
    }

	name = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NameContext);
	    } else {
	        return this.getTypedRuleContext(NameContext,i);
	    }
	};

	CARD() {
	    return this.getToken(FSHParser.CARD, 0);
	};

	KW_NAMED() {
	    return this.getToken(FSHParser.KW_NAMED, 0);
	};

	flag = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FlagContext);
	    } else {
	        return this.getTypedRuleContext(FlagContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterItem(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitItem(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_code;
    }

	CODE() {
	    return this.getToken(FSHParser.CODE, 0);
	};

	STRING() {
	    return this.getToken(FSHParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterCode(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitCode(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitCode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConceptContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_concept;
    }

	STAR() {
	    return this.getToken(FSHParser.STAR, 0);
	};

	CODE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.CODE);
	    } else {
	        return this.getToken(FSHParser.CODE, i);
	    }
	};


	STRING = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(FSHParser.STRING);
	    } else {
	        return this.getToken(FSHParser.STRING, i);
	    }
	};


	MULTILINE_STRING() {
	    return this.getToken(FSHParser.MULTILINE_STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterConcept(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitConcept(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitConcept(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuantityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_quantity;
    }

	UNIT() {
	    return this.getToken(FSHParser.UNIT, 0);
	};

	CODE() {
	    return this.getToken(FSHParser.CODE, 0);
	};

	NUMBER() {
	    return this.getToken(FSHParser.NUMBER, 0);
	};

	STRING() {
	    return this.getToken(FSHParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterQuantity(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitQuantity(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitQuantity(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RatioContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_ratio;
    }

	ratioPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RatioPartContext);
	    } else {
	        return this.getTypedRuleContext(RatioPartContext,i);
	    }
	};

	COLON() {
	    return this.getToken(FSHParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterRatio(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitRatio(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitRatio(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_reference;
    }

	REFERENCE() {
	    return this.getToken(FSHParser.REFERENCE, 0);
	};

	STRING() {
	    return this.getToken(FSHParser.STRING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterReference(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitReference(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReferenceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_referenceType;
    }

	REFERENCE() {
	    return this.getToken(FSHParser.REFERENCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterReferenceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitReferenceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitReferenceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CodeableReferenceTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_codeableReferenceType;
    }

	CODEABLE_REFERENCE() {
	    return this.getToken(FSHParser.CODEABLE_REFERENCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterCodeableReferenceType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitCodeableReferenceType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitCodeableReferenceType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CanonicalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_canonical;
    }

	CANONICAL() {
	    return this.getToken(FSHParser.CANONICAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterCanonical(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitCanonical(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitCanonical(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RatioPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_ratioPart;
    }

	NUMBER() {
	    return this.getToken(FSHParser.NUMBER, 0);
	};

	quantity() {
	    return this.getTypedRuleContext(QuantityContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterRatioPart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitRatioPart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitRatioPart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BoolContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_bool;
    }

	KW_TRUE() {
	    return this.getToken(FSHParser.KW_TRUE, 0);
	};

	KW_FALSE() {
	    return this.getToken(FSHParser.KW_FALSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterBool(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitBool(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitBool(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TargetTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_targetType;
    }

	name() {
	    return this.getTypedRuleContext(NameContext,0);
	};

	referenceType() {
	    return this.getTypedRuleContext(ReferenceTypeContext,0);
	};

	canonical() {
	    return this.getTypedRuleContext(CanonicalContext,0);
	};

	codeableReferenceType() {
	    return this.getTypedRuleContext(CodeableReferenceTypeContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterTargetType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitTargetType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitTargetType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MostAlphaKeywordsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = FSHParser.RULE_mostAlphaKeywords;
    }

	KW_MS() {
	    return this.getToken(FSHParser.KW_MS, 0);
	};

	KW_SU() {
	    return this.getToken(FSHParser.KW_SU, 0);
	};

	KW_TU() {
	    return this.getToken(FSHParser.KW_TU, 0);
	};

	KW_NORMATIVE() {
	    return this.getToken(FSHParser.KW_NORMATIVE, 0);
	};

	KW_DRAFT() {
	    return this.getToken(FSHParser.KW_DRAFT, 0);
	};

	KW_FROM() {
	    return this.getToken(FSHParser.KW_FROM, 0);
	};

	KW_CONTAINS() {
	    return this.getToken(FSHParser.KW_CONTAINS, 0);
	};

	KW_NAMED() {
	    return this.getToken(FSHParser.KW_NAMED, 0);
	};

	KW_AND() {
	    return this.getToken(FSHParser.KW_AND, 0);
	};

	KW_ONLY() {
	    return this.getToken(FSHParser.KW_ONLY, 0);
	};

	KW_OR() {
	    return this.getToken(FSHParser.KW_OR, 0);
	};

	KW_OBEYS() {
	    return this.getToken(FSHParser.KW_OBEYS, 0);
	};

	KW_TRUE() {
	    return this.getToken(FSHParser.KW_TRUE, 0);
	};

	KW_FALSE() {
	    return this.getToken(FSHParser.KW_FALSE, 0);
	};

	KW_INCLUDE() {
	    return this.getToken(FSHParser.KW_INCLUDE, 0);
	};

	KW_EXCLUDE() {
	    return this.getToken(FSHParser.KW_EXCLUDE, 0);
	};

	KW_CODES() {
	    return this.getToken(FSHParser.KW_CODES, 0);
	};

	KW_WHERE() {
	    return this.getToken(FSHParser.KW_WHERE, 0);
	};

	KW_VSREFERENCE() {
	    return this.getToken(FSHParser.KW_VSREFERENCE, 0);
	};

	KW_SYSTEM() {
	    return this.getToken(FSHParser.KW_SYSTEM, 0);
	};

	KW_CONTENTREFERENCE() {
	    return this.getToken(FSHParser.KW_CONTENTREFERENCE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.enterMostAlphaKeywords(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof FSHListener ) {
	        listener.exitMostAlphaKeywords(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof FSHVisitor ) {
	        return visitor.visitMostAlphaKeywords(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




FSHParser.DocContext = DocContext; 
FSHParser.EntityContext = EntityContext; 
FSHParser.AliasContext = AliasContext; 
FSHParser.ProfileContext = ProfileContext; 
FSHParser.ExtensionContext = ExtensionContext; 
FSHParser.LogicalContext = LogicalContext; 
FSHParser.ResourceContext = ResourceContext; 
FSHParser.SdMetadataContext = SdMetadataContext; 
FSHParser.SdRuleContext = SdRuleContext; 
FSHParser.LrRuleContext = LrRuleContext; 
FSHParser.InstanceContext = InstanceContext; 
FSHParser.InstanceMetadataContext = InstanceMetadataContext; 
FSHParser.InstanceRuleContext = InstanceRuleContext; 
FSHParser.InvariantContext = InvariantContext; 
FSHParser.InvariantMetadataContext = InvariantMetadataContext; 
FSHParser.InvariantRuleContext = InvariantRuleContext; 
FSHParser.ValueSetContext = ValueSetContext; 
FSHParser.VsMetadataContext = VsMetadataContext; 
FSHParser.VsRuleContext = VsRuleContext; 
FSHParser.CodeSystemContext = CodeSystemContext; 
FSHParser.CsMetadataContext = CsMetadataContext; 
FSHParser.CsRuleContext = CsRuleContext; 
FSHParser.RuleSetContext = RuleSetContext; 
FSHParser.RuleSetRuleContext = RuleSetRuleContext; 
FSHParser.ParamRuleSetContext = ParamRuleSetContext; 
FSHParser.ParamRuleSetRefContext = ParamRuleSetRefContext; 
FSHParser.ParameterContext = ParameterContext; 
FSHParser.LastParameterContext = LastParameterContext; 
FSHParser.ParamRuleSetContentContext = ParamRuleSetContentContext; 
FSHParser.MappingContext = MappingContext; 
FSHParser.MappingMetadataContext = MappingMetadataContext; 
FSHParser.MappingEntityRuleContext = MappingEntityRuleContext; 
FSHParser.ParentContext = ParentContext; 
FSHParser.IdContext = IdContext; 
FSHParser.TitleContext = TitleContext; 
FSHParser.DescriptionContext = DescriptionContext; 
FSHParser.ExpressionContext = ExpressionContext; 
FSHParser.XpathContext = XpathContext; 
FSHParser.SeverityContext = SeverityContext; 
FSHParser.InstanceOfContext = InstanceOfContext; 
FSHParser.UsageContext = UsageContext; 
FSHParser.SourceContext = SourceContext; 
FSHParser.TargetContext = TargetContext; 
FSHParser.ContextContext = ContextContext; 
FSHParser.ContextItemContext = ContextItemContext; 
FSHParser.LastContextItemContext = LastContextItemContext; 
FSHParser.CharacteristicsContext = CharacteristicsContext; 
FSHParser.CardRuleContext = CardRuleContext; 
FSHParser.FlagRuleContext = FlagRuleContext; 
FSHParser.ValueSetRuleContext = ValueSetRuleContext; 
FSHParser.FixedValueRuleContext = FixedValueRuleContext; 
FSHParser.ContainsRuleContext = ContainsRuleContext; 
FSHParser.OnlyRuleContext = OnlyRuleContext; 
FSHParser.ObeysRuleContext = ObeysRuleContext; 
FSHParser.CaretValueRuleContext = CaretValueRuleContext; 
FSHParser.CodeCaretValueRuleContext = CodeCaretValueRuleContext; 
FSHParser.MappingRuleContext = MappingRuleContext; 
FSHParser.InsertRuleContext = InsertRuleContext; 
FSHParser.CodeInsertRuleContext = CodeInsertRuleContext; 
FSHParser.AddCRElementRuleContext = AddCRElementRuleContext; 
FSHParser.AddElementRuleContext = AddElementRuleContext; 
FSHParser.PathRuleContext = PathRuleContext; 
FSHParser.VsComponentContext = VsComponentContext; 
FSHParser.VsConceptComponentContext = VsConceptComponentContext; 
FSHParser.VsFilterComponentContext = VsFilterComponentContext; 
FSHParser.VsComponentFromContext = VsComponentFromContext; 
FSHParser.VsFromSystemContext = VsFromSystemContext; 
FSHParser.VsFromValuesetContext = VsFromValuesetContext; 
FSHParser.VsFromTargetContext = VsFromTargetContext; 
FSHParser.VsFilterListContext = VsFilterListContext; 
FSHParser.VsFilterDefinitionContext = VsFilterDefinitionContext; 
FSHParser.VsFilterOperatorContext = VsFilterOperatorContext; 
FSHParser.VsFilterValueContext = VsFilterValueContext; 
FSHParser.NameContext = NameContext; 
FSHParser.PathContext = PathContext; 
FSHParser.CaretPathContext = CaretPathContext; 
FSHParser.FlagContext = FlagContext; 
FSHParser.StrengthContext = StrengthContext; 
FSHParser.ValueContext = ValueContext; 
FSHParser.ItemContext = ItemContext; 
FSHParser.CodeContext = CodeContext; 
FSHParser.ConceptContext = ConceptContext; 
FSHParser.QuantityContext = QuantityContext; 
FSHParser.RatioContext = RatioContext; 
FSHParser.ReferenceContext = ReferenceContext; 
FSHParser.ReferenceTypeContext = ReferenceTypeContext; 
FSHParser.CodeableReferenceTypeContext = CodeableReferenceTypeContext; 
FSHParser.CanonicalContext = CanonicalContext; 
FSHParser.RatioPartContext = RatioPartContext; 
FSHParser.BoolContext = BoolContext; 
FSHParser.TargetTypeContext = TargetTypeContext; 
FSHParser.MostAlphaKeywordsContext = MostAlphaKeywordsContext; 
